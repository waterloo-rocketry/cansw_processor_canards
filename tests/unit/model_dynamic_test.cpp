#include "fff.h"
#include <gtest/gtest.h>

extern "C" {

#include "application/estimator/estimator_types.h"
#include "application/estimator/model/model_dynamics.h"
#include "application/estimator/model/quaternion.h"
#include "arm_math.h"
#include "common/math/math-algebra3d.h"
#include "common/math/math.h"
#include "third_party/rocketlib/include/common.h"
#include <math.h>
#include <stdlib.h>

#define TOLERANCE 0.000001

FAKE_VALUE_FUNC(w_status_t, log_text, uint32_t, const char *, const char *);
FAKE_VALUE_FUNC(w_status_t, timer_get_ms, float *);
}

DEFINE_FFF_GLOBALS;

class ModelDynamicTest : public ::testing::Test {
protected:
    void SetUp() override {
        RESET_FAKE(log_text);
        RESET_FAKE(timer_get_ms);
        FFF_RESET_HISTORY();
    }

    void TearDown() override {}
};

// clang-format off
/**
 clear all;
clc;


dt = 0.32;
x = [1;2;3;4;5;6;7;8;9;10;11;12;13;];
u.cmd = 8;
u.accel = [5;77;9;];


 [x_new] = model_dynamics(dt, x, u);
 */
// clang-format on
TEST_F(ModelDynamicTest, DynamicNominalCheck) {
    // Arrange
    double x_expected[13] = {
        -0.917141339436262,
        0.108525854063063,
        0.316168402115824,
        0.217051708126125,
        33.5680350523382,
        35.6503213503122,
        -18.2042864786699,
        18.0695440840953,
        4.50634054834761,
        6.54919628981689,
        13.930353680605,
        11.6100260820305,
        -87.5292991369501
    };

    double dt = 0.32;
    x_state_t estimator_state = {.array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}};
    u_dynamics_t estimator_input = {.cmd = 8.0f, .acceleration = {5.0f, 77.0f, 9.0f}};

    // Act
    x_state_t actual_state = model_dynamics_update(&estimator_state, &estimator_input, dt);

    // Assert

    for (int i = 0; i < 13; i++) {
        EXPECT_NEAR(
            x_expected[i], actual_state.array[i], abs(x_expected[i] * TOLERANCE)
        );
    }
}

// TEST_F(ModelDynamicTest, DynamicJacobiansCheck) {
//     // Arrange
//     x_state_t estimator_state = {
//         .array = {
//             27.134247394025831,
//             13.696050491112839,
//             20.441579066107959,
//             2.730754424270290,
//             1.942204271997857,
//             19.108711908323016,
//             28.050020283672403,
//             33.624384632250589,
//             4.676623505054285,
//             20.477651791398937,
//             16.898063078095412,
//             0.428474502044690,
//             12.136415198359735
//         }
//     };
//     u_dynamics_t estimator_input = {.cmd = 3.2, .acceleration = {10, 22, 31}};
//     double dt = 0.55;

//     const double expected_flat[169] = {
//         1,
//         -0.534106174799411,
//         -5.25489577478883,
//         -7.71375557800991,
//         -0.102540542999186,
//         -0.153043435299806,
//         -0.0204448020722325,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0.534106174799411,
//         1,
//         7.71375557800991,
//         -5.25489577478883,
//         0.203150569827637,
//         -0.0204448020722325,
//         0.153043435299806,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         5.25489577478883,
//         -7.71375557800991,
//         1,
//         0.534106174799411,
//         0.0204448020722325,
//         0.203150569827637,
//         -0.102540542999186,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         7.71375557800991,
//         5.25489577478883,
//         -0.534106174799411,
//         1,
//         -0.153043435299806,
//         0.102540542999186,
//         0.203150569827637,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         1,
//         15.4275111560198,
//         -10.5097915495777,
//         96.6699489855131,
//         13.4452707641356,
//         58.8731533875848,
//         0,
//         5273.27755761948,
//         186.172353097298,
//         0,
//         0,
//         0,
//         0,
//         -15.4275111560198,
//         1,
//         1.06821234959882,
//         -0.132418361229034,
//         0,
//         -0.217431468983542,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         10.5097915495777,
//         -1.06821234959882,
//         1,
//         0.0302413004641761,
//         0.217431468983542,
//         0,
//         0,
//         0,
//         0,
//         -7.97162836003646,
//         -4.02369090728806,
//         6.00542440116438,
//         0.802254033314404,
//         -0,
//         11.2627084852694,
//         -2.57214292777986,
//         1,
//         -15.4275111560198,
//         10.5097915495777,
//         0,
//         0,
//         0,
//         0.802254033314404,
//         -6.00542440116438,
//         -4.02369090728806,
//         7.97162836003646,
//         -11.2627084852694,
//         -0,
//         18.4934115477378,
//         15.4275111560198,
//         1,
//         -1.06821234959882,
//         0,
//         0,
//         0,
//         -6.00542440116438,
//         -0.802254033314404,
//         -7.97162836003646,
//         -4.02369090728806,
//         2.57214292777986,
//         -18.4934115477378,
//         -0,
//         -10.5097915495777,
//         1.06821234959882,
//         1,
//         0,
//         0,
//         0,
//         39.4766817329883,
//         -18.3290028912041,
//         2.02560476078396,
//         -1.84914766204089,
//         0,
//         0,
//         0,
//         0.203232246979802,
//         0.167851400248954,
//         0.482724104662287,
//         1,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0.725,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         -6.85714285714286
//     };

//     // Act
//     double actual_res[169] = {};
//     model_dynamics_jacobian(actual_res, &estimator_state, &estimator_input, dt);

//     // Assert

//     for (int i = 0; i < 169; i++) {
//         EXPECT_NEAR(expected_flat[i], actual_res[i], abs(expected_flat[i] * TOLERANCE));
//     }
// }

TEST_F(ModelDynamicTest, DynamicJacobiansBetterCheck) {
    // Arrange
    x_state_t estimator_state = {
        .array = {
            8.109115409662138,
            39.714227034195346,
            15.560752102240244,
            26.426656775310637,
            8.282436474989046,
            30.099097070081825,
            13.148564227007215,
            32.703954923839113,
            34.460725157000390,
            37.407579641185471,
            22.527079925124887,
            4.191068899846629,
            11.448848435840942,
        }
    };
    u_dynamics_t estimator_input = {.cmd = 2.4, .acceleration = {3.2, 18.6, 1.5}};
    double dt = 0.43;

    const double expected_flat[169] = {
        1,
        -1.78072384212264,
        -6.47130587006759,
        -2.82694130880655,
        -0.167989365167236,
        -0.0658212701692339,
        -0.111783550296834,
        0,
        0,
        0,
        0,
        0,
        0,
        1.78072384212264,
        1,
        2.82694130880655,
        -6.47130587006759,
        0.0343011875458145,
        -0.111783550296834,
        0.0658212701692339,
        0,
        0,
        0,
        0,
        0,
        0,
        6.47130587006759,
        -2.82694130880655,
        1,
        1.78072384212264,
        0.111783550296834,
        0.0343011875458145,
        -0.167989365167236,
        0,
        0,
        0,
        0,
        0,
        0,
        2.82694130880655,
        6.47130587006759,
        -1.78072384212264,
        1,
        -0.0658212701692339,
        0.167989365167236,
        0.0343011875458145,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        5.6538826176131,
        -12.9426117401352,
        677.921630193039,
        714.337792798228,
        775.423260917077,
        0,
        9042.32619198454,
        3310.11562410568,
        0,
        0,
        0,
        0,
        -5.6538826176131,
        1,
        3.56144768424529,
        -0.189015986414832,
        0,
        -0.165249138246565,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        12.9426117401352,
        -3.56144768424529,
        1,
        0.174125886266894,
        0.165249138246565,
        0,
        0,
        0,
        0,
        -1.34597859929776,
        -6.59190268916232,
        2.58282664144074,
        4.38638651364776,
        -0,
        16.0852592457098,
        -14.8181118175102,
        1,
        -5.6538826176131,
        12.9426117401352,
        0,
        0,
        0,
        4.38638651364776,
        -2.58282664144074,
        -6.59190268916232,
        1.34597859929776,
        -16.0852592457098,
        -0,
        14.0627006172508,
        5.6538826176131,
        1,
        -3.56144768424529,
        0,
        0,
        0,
        -2.58282664144074,
        -4.38638651364776,
        -1.34597859929776,
        -6.59190268916232,
        14.8181118175102,
        -14.0627006172508,
        -0,
        -12.9426117401352,
        3.56144768424529,
        1,
        0,
        0,
        0,
        -1.07257322632341,
        -47.7748695488141,
        -19.6781755783596,
        -5.78507027862462,
        0,
        0,
        0,
        0.116920898164538,
        0.134380741710921,
        0.391371076894576,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0.785,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        -5.14285714285714
    };

    // Act
    double actual_res[169] = {};
    model_dynamics_jacobian(actual_res, &estimator_state, &estimator_input, dt);

    // Assert

    for (int i = 0; i < 169; i++) {
        EXPECT_NEAR(expected_flat[i], actual_res[i], abs(expected_flat[i] * TOLERANCE));
    }
}