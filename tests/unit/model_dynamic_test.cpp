#include "fff.h"
#include <gtest/gtest.h>

extern "C" {

#include "application/estimator/estimator_types.h"
#include "application/estimator/model/model_dynamics.h"
#include "application/estimator/model/quaternion.h"
#include "arm_math.h"
#include "common/math/math-algebra3d.h"
#include "common/math/math.h"
#include "third_party/rocketlib/include/common.h"
#include <math.h>
#include <stdlib.h>

#define TOLERANCE 0.000001f

FAKE_VALUE_FUNC(w_status_t, log_text, uint32_t, const char *, const char *);
FAKE_VALUE_FUNC(w_status_t, timer_get_ms, float *);
}

DEFINE_FFF_GLOBALS;

class ModelDynamicTest : public ::testing::Test {
protected:
    void SetUp() override {
        RESET_FAKE(log_text);
        RESET_FAKE(timer_get_ms);
        FFF_RESET_HISTORY();
    }

    void TearDown() override {}
};

TEST_F(ModelDynamicTest, DynamicNominalCheck) {
    // Arrange
    x_state_t expected_state = {
        .array = {
            -0.743957724428779,
            0.216831899582257,
            0.459833166355476,
            0.433663799164514,
            77.075955796064676,
            9.969992917198999,
            3.899588192702720,
            12.652799999999999,
            31.301439999999999,
            11.537920000000000,
            12.023999999999999,
            11.464166318621979,
            -19.000000000000000
        }
    };

    double dt = 0.32;
    x_state_t estimator_state = {.array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}};
    u_dynamics_t estimator_input = {.cmd = 8.0f, .acceleration = {5.0f, 77.0f, 9.0f}};

    // Act
    x_state_t actual_state = model_dynamics_update(&estimator_state, &estimator_input, dt);

    // Assert

    for (int i = 0; i < 13; i++) {
        EXPECT_NEAR(
            expected_state.array[i], actual_state.array[i], abs(expected_state.array[i] * TOLERANCE)
        );
    }
}

TEST_F(ModelDynamicTest, DynamicJacobiansCheck) {
    // Arrange
    x_state_t estimator_state = {
        .array = {
            27.134247394025831,
            13.696050491112839,
            20.441579066107959,
            2.730754424270290,
            1.942204271997857,
            19.108711908323016,
            28.050020283672403,
            33.624384632250589,
            4.676623505054285,
            20.477651791398937,
            16.898063078095412,
            0.428474502044690,
            12.136415198359735
        }
    };
    u_dynamics_t estimator_input = {.cmd = 3.1, .acceleration = {10, 22, 31}};
    double dt = 0.55;

    const double expected_flat[169] = {
        1.00000000000,  -0.53410617480,  -5.25489577479,  -7.71375557801,  -0.10254054300,
        -0.15304343530, -0.02044480207,  0.00000000000,   0.00000000000,   0.00000000000,
        0.00000000000,  0.00000000000,   0.00000000000,   0.53410617480,   1.00000000000,
        7.71375557801,  -5.25489577479,  0.20315056983,   -0.02044480207,  0.15304343530,
        0.00000000000,  0.00000000000,   0.00000000000,   0.00000000000,   0.00000000000,
        0.00000000000,  5.25489577479,   -7.71375557801,  1.00000000000,   0.53410617480,
        0.02044480207,  0.20315056983,   -0.10254054300,  0.00000000000,   0.00000000000,
        0.00000000000,  0.00000000000,   0.00000000000,   0.00000000000,   7.71375557801,
        5.25489577479,  -0.53410617480,  1.00000000000,   -0.15304343530,  0.10254054300,
        0.20315056983,  0.00000000000,   0.00000000000,   0.00000000000,   0.00000000000,
        0.00000000000,  0.00000000000,   0.00000000000,   0.00000000000,   0.00000000000,
        0.00000000000,  1.00000000000,   15.42751115602,  -10.50979154958, 1.13283354290,
        0.15755934367,  0.68990915619,   0.00000000000,   61.79527103277,  2.18167371104,
        0.00000000000,  0.00000000000,   0.00000000000,   0.00000000000,   -15.42751115602,
        1.00000000000,  1.06821234960,   -0.81056087783,  0.00000000000,   -1.33094414348,
        0.00000000000,  0.00000000000,   0.00000000000,   0.00000000000,   0.00000000000,
        0.00000000000,  0.00000000000,   10.50979154958,  -1.06821234960,  1.00000000000,
        0.18511341496,  1.33094414348,   0.00000000000,   0.00000000000,   0.00000000000,
        0.00000000000,  -7.97162836004,  -4.02369090729,  6.00542440116,   0.80225403331,
        0.00000000000,  11.26270848527,  -2.57214292778,  1.00000000000,   -15.42751115602,
        10.50979154958, 0.00000000000,   0.00000000000,   0.00000000000,   0.80225403331,
        -6.00542440116, -4.02369090729,  7.97162836004,   -11.26270848527, 0.00000000000,
        18.49341154774, 15.42751115602,  1.00000000000,   -1.06821234960,  0.00000000000,
        0.00000000000,  0.00000000000,   -6.00542440116,  -0.80225403331,  -7.97162836004,
        -4.02369090729, 2.57214292778,   -18.49341154774, 0.00000000000,   -10.50979154958,
        1.06821234960,  1.00000000000,   0.00000000000,   0.00000000000,   0.00000000000,
        39.47668173299, -18.32900289120, 2.02560476078,   -1.84914766204,  0.00000000000,
        0.00000000000,  0.00000000000,   0.20323224698,   0.16785140025,   0.48272410466,
        1.00000000000,  0.00000000000,   0.00000000000,   0.00000000000,   0.00000000000,
        0.00000000000,  0.00000000000,   0.00000000000,   0.00000000000,   0.00000000000,
        0.00000000000,  0.00000000000,   0.00000000000,   0.00000000000,   0.89000000000,
        0.00000000000,  0.00000000000,   0.00000000000,   0.00000000000,   0.00000000000,
        0.00000000000,  0.00000000000,   0.00000000000,   0.00000000000,   0.00000000000,
        0.00000000000,  0.00000000000,   0.00000000000,   -10.00000000000
    };

    // Act
    arm_matrix_instance_f64 actual_res;
    model_dynamics_jacobian(&actual_res, &estimator_state, &estimator_input, dt);

    // Assert

    for (int i = 0; i < 169; i++) {
        EXPECT_NEAR(expected_flat[i], actual_res.pData[i], abs(expected_flat[i] * TOLERANCE));
    }
}
