#include "fff.h"
#include <gtest/gtest.h>

extern "C" {

#include "application/estimator/estimator_types.h"
#include "application/estimator/model/model_dynamics.h"
#include "application/estimator/model/quaternion.h"
#include "arm_math.h"
#include "common/math/math-algebra3d.h"
#include "common/math/math.h"
#include "third_party/rocketlib/include/common.h"
#include <math.h>
#include <stdlib.h>

#define TOLERANCE 0.000001

FAKE_VALUE_FUNC(w_status_t, log_text, uint32_t, const char *, const char *);
FAKE_VALUE_FUNC(w_status_t, timer_get_ms, float *);
}

DEFINE_FFF_GLOBALS;

class ModelDynamicTest : public ::testing::Test {
protected:
    void SetUp() override {
        RESET_FAKE(log_text);
        RESET_FAKE(timer_get_ms);
        FFF_RESET_HISTORY();
    }

    void TearDown() override {}
};

// clang-format off
/**
clear global;

dt = 0.32;
x = [1;2;3;4;5;6;7;8;9;10;11;12;13;];
u.cmd = 8;
u.accel = [5;77;9;];

 [x_new] = model_dynamics(dt, x, u);
 disp(x_new);
 */
// clang-format on
TEST_F(ModelDynamicTest, DynamicNominalCheck) {
    // Arrange
    const double x_expected[13] = {
        -0.743957724428779,
        0.216831899582257,
        0.459833166355476,
        0.433663799164514,
        14.982981947610659,
        16.973463064565767,
        -2.393578880801206,
        12.652799999999999,
        31.301439999999999,
        11.537920000000000,
        12.023999999999999,
        11.945490089521439,
        -40.333333333333343
    };

    double dt = 0.32;
    x_state_t estimator_state = {.array = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}};
    u_dynamics_t estimator_input = {.cmd = 8.0f, .acceleration = {5.0f, 77.0f, 9.0f}};

    // Act
    x_state_t actual_state = model_dynamics_update(&estimator_state, &estimator_input, dt);

    // Assert

    for (int i = 0; i < 13; i++) {
        EXPECT_NEAR(x_expected[i], actual_state.array[i], abs(x_expected[i] * TOLERANCE));
    }
}

// clang-format off
/**
dt = 0.55;
x = [
    27.134247394025831;
    13.696050491112839;
    20.441579066107959;
    2.730754424270290;
    1.942204271997857;
    19.108711908323016;
    28.050020283672403;
    33.624384632250589;
    4.676623505054285;
    20.477651791398937;
    16.898063078095412;
    0.428474502044690;
    12.136415198359735
];
u.cmd = 3.2;
u.accel = [10; 22; 31];
[J] = model_dynamics_jacobian(dt, x, u);
J_c = reshape(J.', 1, []);  % Transpose first, then flatten row-wise
fprintf('{ ');
fprintf('%.9f, ', J_c(1:end-1));  % Print all except the last element
fprintf('%.9f };\n', J_c(end));   % Print the last element and close the array

 */
// clang-format on
TEST_F(ModelDynamicTest, DynamicJacobiansCheck) {
    // Arrange
    x_state_t estimator_state = {
        .array = {
            27.134247394025831,
            13.696050491112839,
            20.441579066107959,
            2.730754424270290,
            1.942204271997857,
            19.108711908323016,
            28.050020283672403,
            33.624384632250589,
            4.676623505054285,
            20.477651791398937,
            16.898063078095412,
            0.428474502044690,
            12.136415198359735
        }
    };
    u_dynamics_t estimator_input = {.cmd = 3.2, .acceleration = {10, 22, 31}};
    double dt = 0.55;

    const double expected_flat[SIZE_STATE * SIZE_STATE] = {
        1.000000000,   -0.534106175, -5.254895775,  -7.713755578,    -0.102540543,   -0.153043435,
        -0.020444802,  0.000000000,  0.000000000,   0.000000000,     0.000000000,    0.000000000,
        0.000000000,   0.534106175,  1.000000000,   7.713755578,     -5.254895775,   0.203150570,
        -0.020444802,  0.153043435,  0.000000000,   0.000000000,     0.000000000,    0.000000000,
        0.000000000,   0.000000000,  5.254895775,   -7.713755578,    1.000000000,    0.534106175,
        0.020444802,   0.203150570,  -0.102540543,  0.000000000,     0.000000000,    0.000000000,
        0.000000000,   0.000000000,  0.000000000,   7.713755578,     5.254895775,    -0.534106175,
        1.000000000,   -0.153043435, 0.102540543,   0.203150570,     0.000000000,    0.000000000,
        0.000000000,   0.000000000,  0.000000000,   0.000000000,     0.000000000,    0.000000000,
        0.000000000,   0.000000000,  1.000000000,   -1660.134352659, 1130.944960226, 0.156904708,
        0.021822979,   0.095556841,  0.000000000,   8.559041200,     0.302175795,    0.000000000,
        0.000000000,   0.000000000,  0.000000000,   15.427511156,    1.000000000,    -0.009926822,
        -0.022515580,  0.000000000,  -0.036970671,  0.000000000,     0.000000000,    0.000000000,
        0.000000000,   0.000000000,  0.000000000,   0.000000000,     -10.509791550,  0.009926822,
        1.000000000,   0.005142039,  0.036970671,   0.000000000,     0.000000000,    0.000000000,
        0.000000000,   -7.971628360, -4.023690907,  6.005424401,     0.802254033,    0.000000000,
        -11.262708485, 2.572142928,  1.000000000,   15.427511156,    -10.509791550,  0.000000000,
        0.000000000,   0.000000000,  0.802254033,   -6.005424401,    -4.023690907,   7.971628360,
        11.262708485,  0.000000000,  -18.493411548, -15.427511156,   1.000000000,    1.068212350,
        0.000000000,   0.000000000,  0.000000000,   -6.005424401,    -0.802254033,   -7.971628360,
        -4.023690907,  -2.572142928, 18.493411548,  0.000000000,     10.509791550,   -1.068212350,
        1.000000000,   0.000000000,  0.000000000,   0.000000000,     39.476681733,   -18.329002891,
        2.025604761,   -1.849147662, 0.000000000,   0.000000000,     0.000000000,    0.203232247,
        0.167851400,   0.482724105,  1.000000000,   0.000000000,     0.000000000,    0.000000000,
        0.000000000,   0.000000000,  0.000000000,   0.000000000,     0.000000000,    0.000000000,
        0.000000000,   0.000000000,  0.000000000,   0.000000000,     0.989000000,    0.000000000,
        0.000000000,   0.000000000,  0.000000000,   0.000000000,     0.000000000,    0.000000000,
        0.000000000,   0.000000000,  0.000000000,   0.000000000,     0.000000000,    0.000000000,
        -17.333333333
    };

    // Act
    double actual_res[169] = {};
    model_dynamics_jacobian(actual_res, &estimator_state, &estimator_input, dt);

    // Assert

    for (int i = 0; i < 169; i++) {
        EXPECT_NEAR(expected_flat[i], actual_res[i], abs(expected_flat[i] * TOLERANCE));
    }
}

/**
 * clang-format off
clear;
dt = 0.43;
x = [
    8.109115409662138;
    39.714227034195346;
    15.560752102240244;
    26.426656775310637;
    8.282436474989046;
    30.099097070081825;
    13.148564227007215;
    32.703954923839113;
    34.460725157000390;
    37.407579641185471;
    22.527079925124887;
    4.191068899846629;
    11.448848435840942
];
u.cmd = 2.4;
u.accel = [3.2; 18.6; 1.5];
J = model_dynamics_jacobian(dt, x, u);
J_c = reshape(J.', 1, []);  % Transpose, then flatten row-wise
fprintf('{ ');
fprintf('%.9f, ', J_c(1:end-1));
fprintf('%.9f };\n', J_c(end));
// clang-format on
 */
TEST_F(ModelDynamicTest, DynamicJacobiansBetterCheck) {
    // Arrange
    x_state_t estimator_state = {
        .array = {
            8.109115409662138,
            39.714227034195346,
            15.560752102240244,
            26.426656775310637,
            8.282436474989046,
            30.099097070081825,
            13.148564227007215,
            32.703954923839113,
            34.460725157000390,
            37.407579641185471,
            22.527079925124887,
            4.191068899846629,
            11.448848435840942,
        }
    };
    u_dynamics_t estimator_input = {.cmd = 2.4, .acceleration = {3.2, 18.6, 1.5}};
    double dt = 0.43;

    const double expected_flat[SIZE_STATE * SIZE_STATE] = {
        1.000000000,   -1.780723842,  -6.471305870,  -2.826941309,   -0.167989365,   -0.065821270,
        -0.111783550,  0.000000000,   0.000000000,   0.000000000,    0.000000000,    0.000000000,
        0.000000000,   1.780723842,   1.000000000,   2.826941309,    -6.471305870,   0.034301188,
        -0.111783550,  0.065821270,   0.000000000,   0.000000000,    0.000000000,    0.000000000,
        0.000000000,   0.000000000,   6.471305870,   -2.826941309,   1.000000000,    1.780723842,
        0.111783550,   0.034301188,   -0.167989365,  0.000000000,    0.000000000,    0.000000000,
        0.000000000,   0.000000000,   0.000000000,   2.826941309,    6.471305870,    -1.780723842,
        1.000000000,   -0.065821270,  0.167989365,   0.034301188,    0.000000000,    0.000000000,
        0.000000000,   0.000000000,   0.000000000,   0.000000000,    0.000000000,    0.000000000,
        0.000000000,   0.000000000,   1.000000000,   -608.406933852, 1392.737567688, 1.100332592,
        1.159439558,   1.258587200,   0.000000000,   14.676572885,   5.372638875,    0.000000000,
        0.000000000,   0.000000000,   0.000000000,   5.653882618,    1.000000000,    -0.033096282,
        -0.032139082,  0.000000000,   -0.028097917,  0.000000000,    0.000000000,    0.000000000,
        0.000000000,   0.000000000,   0.000000000,   0.000000000,    -12.942611740,  0.033096282,
        1.000000000,   0.029607263,   0.028097917,   0.000000000,    0.000000000,    0.000000000,
        0.000000000,   -1.345978599,  -6.591902689,  2.582826641,    4.386386514,    0.000000000,
        -16.085259246, 14.818111818,  1.000000000,   5.653882618,    -12.942611740,  0.000000000,
        0.000000000,   0.000000000,   4.386386514,   -2.582826641,   -6.591902689,   1.345978599,
        16.085259246,  0.000000000,   -14.062700617, -5.653882618,   1.000000000,    3.561447684,
        0.000000000,   0.000000000,   0.000000000,   -2.582826641,   -4.386386514,   -1.345978599,
        -6.591902689,  -14.818111818, 14.062700617,  0.000000000,    12.942611740,   -3.561447684,
        1.000000000,   0.000000000,   0.000000000,   0.000000000,    -1.072573226,   -47.774869549,
        -19.678175578, -5.785070279,  0.000000000,   0.000000000,    0.000000000,    0.116920898,
        0.134380742,   0.391371077,   1.000000000,   0.000000000,    0.000000000,    0.000000000,
        0.000000000,   0.000000000,   0.000000000,   0.000000000,    0.000000000,    0.000000000,
        0.000000000,   0.000000000,   0.000000000,   0.000000000,    0.991400000,    0.000000000,
        0.000000000,   0.000000000,   0.000000000,   0.000000000,    0.000000000,    0.000000000,
        0.000000000,   0.000000000,   0.000000000,   0.000000000,    0.000000000,    0.000000000,
        -13.333333333
    };

    // Act
    double actual_res[169] = {};
    model_dynamics_jacobian(actual_res, &estimator_state, &estimator_input, dt);

    // Assert

    for (int i = 0; i < 169; i++) {
        EXPECT_NEAR(expected_flat[i], actual_res[i], abs(expected_flat[i] * TOLERANCE));
    }
}
