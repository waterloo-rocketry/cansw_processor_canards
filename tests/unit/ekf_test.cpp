#include "fff.h"
#include <gtest/gtest.h>

extern "C" {
#include "application/estimator/ekf.h"
#include "application/estimator/estimator_types.h"
#include "arm_math.h"
#include "common/math/math-algebra3d.h"
#include "third_party/rocketlib/include/common.h"

DEFINE_FFF_GLOBALS;
FAKE_VALUE_FUNC(w_status_t, log_text, const char *, const char *);
}

class EstimatorEKFTest : public ::testing::Test {
protected:
    void SetUp() override {
        ekf_init();
        FFF_RESET_HISTORY();
    }

    void TearDown() override {}
};

TEST_F(EstimatorEKFTest, EKFPredictNominalCheckWithAllZerosP) {
    // Arrange
    x_state_t state = {
        .array = {
            0.814723686393179,
            0.905791937075619,
            0.126986816293506,
            0.913375856139019,
            0.632359246225410,
            0.097540404999410,
            0.278498218867048,
            0.546881519204984,
            0.957506835434298,
            0.964888535199277,
            0.157613081677548,
            0.970592781760616,
            0.957166948242946
        }
    };
    double P_flat[SIZE_STATE * SIZE_STATE] = {0};
    const u_dynamics_t input = {
        .cmd = 4.217612826262750,
        .acceleration = {.array = {1.456126946168524, 2.400841406666400, 0.425659015881646}}
    };
    double dt = 0.915735525189067;

    // set up Q like ekf_algorithm would
    static double Q_diag[SIZE_STATE] = {
        1e-9, 1e-9, 1e-9, 1e-9, 1e-2, 1e-2, 1e-2, 1e-3, 1e-3, 1e-3, 1e-3, 30, 0.5
    };
    double Q_arr[SIZE_STATE * SIZE_STATE] = {0};
    arm_matrix_instance_f64 Q = {.numRows = SIZE_STATE, .numCols = SIZE_STATE, .pData = Q_arr};
    math_init_matrix_diag(&Q, (uint16_t)SIZE_STATE, Q_diag);

    x_state_t expected_state = {
        .array = {
            0.268274165208879,
            0.696419511023482,
            0.194712315844409,
            0.636487196262266,
            0.633851629227564,
            0.23676414728081,
            0.24305006725801,
            -0.400684442488099,
            8.41693588011966,
            -6.31409592104001,
            0.525564693616072,
            1.08561986436705,
            38.2784934289804
        }
    };

    // Predicted Covariance (P_expected)
    double P_expected[SIZE_STATE * SIZE_STATE] = {
        9.15735525189067e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        9.15735525189067e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        9.15735525189067e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        9.15735525189067e-10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.00915735525189067,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.00915735525189067,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.00915735525189067,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.000915735525189067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.000915735525189067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.000915735525189067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.000915735525189067, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        27.472065755672,      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.457867762594533
    };

    // Act
    ekf_matrix_predict(&state, P_flat, &input, Q.pData, dt);

    // Assert
    double tolerance = 1e-6;

    // check x
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // check P
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], P_expected[i], tolerance);
    }
}

TEST_F(EstimatorEKFTest, EKFPredictNominalCheckWithNoneAllZerosP) {
    // Arrange
    x_state_t state = {
        .array = {
            0.814723686393179,
            0.905791937075619,
            0.126986816293506,
            0.913375856139019,
            0.632359246225410,
            0.097540404999410,
            0.278498218867048,
            0.546881519204984,
            0.957506835434298,
            0.964888535199277,
            0.157613081677548,
            0.970592781760616,
            0.957166948242946
        }
    };
    double P_flat[SIZE_STATE * SIZE_STATE] = {
        0.81472368639318, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.90579193707562,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.12698681629351, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.91337585613902, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.63235924622541, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.09754040499941, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.27849821886705,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.54688151920498, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.95750683543430, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.96488853519928, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.15761308167755, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.97059278176062,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.95716694824295
    };
    const u_dynamics_t input = {
        .cmd = 4.217612826262750,
        .acceleration = {.array = {1.456126946168524, 2.400841406666400, 0.425659015881646}}
    };
    double dt = 0.915735525189067;

    // set up Q like ekf_algorithm would
    static double Q_diag[SIZE_STATE] = {
        1e-9, 1e-9, 1e-9, 1e-9, 1e-2, 1e-2, 1e-2, 1e-3, 1e-3, 1e-3, 1e-3, 30, 0.5
    };
    double Q_arr[SIZE_STATE * SIZE_STATE] = {0};
    arm_matrix_instance_f64 Q = {.numRows = SIZE_STATE, .numCols = SIZE_STATE, .pData = Q_arr};
    math_init_matrix_diag(&Q, (uint16_t)SIZE_STATE, Q_diag);

    const x_state_t expected_state = {
        .array = {
            0.268274165208879,
            0.696419511023482,
            0.194712315844409,
            0.636487196262266,
            0.633851629227564,
            0.23676414728081,
            0.24305006725801,
            -0.400684442488099,
            8.41693588011966,
            -6.31409592104001,
            0.525564693616072,
            1.08561986436705,
            38.2784934289804
        }
    };

    const double expected_P_flat[SIZE_STATE * SIZE_STATE] = {
        0.973356577387526,
        -0.0656791040224859,
        0.00323946303702794,
        -0.0357362844431009,
        -0.802446292490351,
        -0.0470756311942572,
        -0.0609148820154799,
        -6.33476241553758,
        7.97300136293013,
        3.04365455001554,
        0.125832764546289,
        0,
        0,
        -0.0656791040224859,
        1.02338062929873,
        -0.0677237386775862,
        0.0145188281509466,
        0.988914869139789,
        0.0126187800882115,
        -0.00333582497280572,
        -12.2885139678312,
        0.748834135640235,
        -9.94998533253457,
        -1.76393422823064,
        0,
        0,
        0.00323946303702793,
        -0.0677237386775862,
        0.293614987877751,
        0.208592090871084,
        -1.20703601277786,
        0.0683611244746906,
        -0.0909248331929148,
        3.8242268370268,
        1.93503868079715,
        -2.98692080893767,
        0.08154024293771,
        0,
        0,
        -0.0357362844431009,
        0.0145188281509466,
        0.208592090871084,
        0.963777578037305,
        -0.097113857740252,
        0.0199728083990179,
        0.0702849930326335,
        8.36498595999724,
        10.1419517155467,
        -9.93136388169259,
        0.403077332814942,
        0,
        0,
        -0.802446292490351,
        0.988914869139789,
        -1.20703601277786,
        -0.0971138577402519,
        99.8329831881484,
        -2.52999824256608,
        2.60597632496502,
        4.71297125278943,
        -0.779904711097661,
        -1.89443819878637,
        0.000419421423152758,
        0.00142405159295701,
        -0.0155904686797157,
        -0.0470756311942572,
        0.0126187800882115,
        0.0683611244746906,
        0.0199728083990179,
        -2.52999824256608,
        0.147931441165979,
        -0.0154398661345964,
        -0.0927859214510633,
        0.141365638923454,
        -0.0988819535477155,
        -0.00568237956209179,
        0,
        0,
        -0.0609148820154799,
        -0.00333582497280572,
        -0.0909248331929148,
        0.0702849930326335,
        2.60597632496502,
        -0.0154398661345964,
        0.292798887318112,
        0.250960051051614,
        -0.185087330219447,
        0.0469670980642458,
        -0.00141094945982056,
        0,
        0,
        -6.33476241553758,
        -12.2885139678312,
        3.8242268370268,
        8.36498595999724,
        4.71297125278943,
        -0.0927859214510633,
        0.250960051051614,
        284.080956606176,
        22.469288330823,
        8.74871212075367,
        24.5553044605913,
        0,
        0,
        7.97300136293013,
        0.748834135640234,
        1.93503868079715,
        10.1419517155467,
        -0.779904711097661,
        0.141365638923454,
        -0.185087330219447,
        22.469288330823,
        196.114627949725,
        -79.2791309243417,
        5.93759372242403,
        0,
        0,
        3.04365455001554,
        -9.94998533253457,
        -2.98692080893767,
        -9.93136388169259,
        -1.89443819878637,
        -0.0988819535477155,
        0.0469670980642458,
        8.74871212075366,
        -79.2791309243417,
        223.373913777966,
        16.4881282262821,
        0,
        0,
        0.125832764546289,
        -1.76393422823064,
        0.08154024293771,
        0.403077332814942,
        0.000419421423152758,
        -0.00568237956209179,
        -0.00141094945982056,
        24.5553044605913,
        5.93759372242403,
        16.4881282262821,
        4.64501309059925,
        0,
        0,
        0,
        0,
        0,
        0,
        0.00142405159295701,
        0,
        0,
        0,
        0,
        0,
        0,
        28.3558126854931,
        0,
        0,
        0,
        0,
        0,
        -0.0155904686797157,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        104.916767545346
    };

    // Act
    ekf_matrix_predict(&state, P_flat, &input, Q.pData, dt);

    // Assert
    double tolerance = 1e-6;

    // check x
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // check P
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        double P_tolerance = expected_P_flat[i] > 90 ? expected_P_flat[i] * tolerance : tolerance;
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], P_tolerance);
    }

    // do it again!

    // Arrange
    x_state_t state2 = {
        .array = {
            0.814723686393179,
            0.905791937075619,
            0.126986816293506,
            0.913375856139019,
            0.632359246225410,
            0.097540404999410,
            0.278498218867048,
            0.546881519204984,
            0.957506835434298,
            0.964888535199277,
            0.157613081677548,
            0.970592781760616,
            0.957166948242946
        }
    };
    double P_flat2[SIZE_STATE * SIZE_STATE] = {
        0.81472368639318, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.90579193707562,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.12698681629351, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.91337585613902, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.63235924622541, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.09754040499941, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.27849821886705,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.54688151920498, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.95750683543430, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.96488853519928, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.15761308167755, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.97059278176062,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.95716694824295
    };

    // Act
    ekf_matrix_predict(&state2, P_flat2, &input, Q.pData, dt);

    // Assert
    // check x
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state2.array[i], expected_state.array[i], tolerance);
    }

    // check P
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        double P_tolerance = expected_P_flat[i] > 90 ? expected_P_flat[i] * tolerance : tolerance;
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], P_tolerance);
    }
}

TEST_F(EstimatorEKFTest, EKFCorrecIMUNominalCheck) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            8.834741558736747,
            1.407644570039071,
            7.699705252613202,
            5.802880831830792,
            3.386449892509485,
            1.718313257126727,
            3.854276936814474,
            4.338198549286707,
            1.085504519674461,
            5.305567362255530,
            2.035689117774082,
            3.461572119324697,
            5.246877444729065
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        0.25180612247231, 0.26072799905547, 0.63853075827184, 0.61095865874620, 0.63770909807217,
        0.78051965273136, 0.47135715371061, 0.76550001662144, 0.20893492242602, 0.83291681907522,
        0.54471611052676, 0.76350464084881, 0.39345636121527, 0.29044066427698, 0.59435625066433,
        0.03360383606643, 0.77880224182409, 0.95769393984158, 0.67533206574700, 0.03576273326912,
        0.18866197679149, 0.70928170271055, 0.25644099222915, 0.64731148029313, 0.62789637961417,
        0.67143113967403, 0.61709088439322, 0.02251259274023, 0.06880609911805, 0.42345291896274,
        0.24070703548016, 0.00671531431848, 0.17587441568353, 0.28749817306613, 0.23623057699380,
        0.61346073681288, 0.54388593399964, 0.77198038555425, 0.74125794345421, 0.26528090981003,
        0.42525932021414, 0.31959973518050, 0.09082328578744, 0.67612230386375, 0.60217048758180,
        0.72175803339110, 0.09111346368654, 0.11939624779731, 0.58224916452723, 0.72104662057981,
        0.93285357027882, 0.52005246739039, 0.82437626668884, 0.31271888682062, 0.53086428069413,
        0.26647149077907, 0.28906457167448, 0.38677119452099, 0.47348599296532, 0.57620938066301,
        0.60730394068564, 0.54073933712441, 0.52249530577710, 0.97274085400301, 0.34771267127753,
        0.98266339972195, 0.16148474431175, 0.65444570775707, 0.15365671759131, 0.67180816541422,
        0.91599124413143, 0.15272120043823, 0.68336324329465, 0.45013769696590, 0.86994103235801,
        0.99370462412085, 0.19202834942778, 0.14999725383168, 0.73024879226760, 0.17876618675237,
        0.40761919704115, 0.28100530253387, 0.69514049955174, 0.00115105712911, 0.34112460704911,
        0.54659311459032, 0.45872549364887, 0.26477902647563, 0.21867663239963, 0.13887420282916,
        0.58609206723146, 0.34387700411498, 0.42288568910009, 0.81998122278194, 0.44008513900172,
        0.06799276847001, 0.46244915924233, 0.60738921376835, 0.42572884187119, 0.66194475190565,
        0.31807407548106, 0.10579827325023, 0.69626633708300, 0.26214531772781, 0.58406933327845,
        0.09422933888774, 0.71835894320588, 0.52714274176065, 0.25479015659701, 0.42434903981538,
        0.19174525546180, 0.64444278143134, 0.77028551480366, 0.11921454105419, 0.10969746452319,
        0.09382002677487, 0.04445409227824, 0.10776901524374, 0.59852366875674, 0.96864933023109,
        0.45742436568767, 0.22404003082422, 0.46091636602896, 0.73842683997694, 0.64761763017268,
        0.35021801344111, 0.93982947034492, 0.06359137097511, 0.52540440385934, 0.75493326723118,
        0.90630815064973, 0.47092425635833, 0.53133390656567, 0.87537159860419, 0.66783272701372,
        0.77015972860861, 0.24284959831817, 0.67901675409320, 0.66200959835914, 0.64555187497252,
        0.40457999585763, 0.53034421839286, 0.24278535782096, 0.87965372448191, 0.69594931330161,
        0.32514568182056, 0.51805210836110, 0.84439215652721, 0.32247180718678, 0.91742434204938,
        0.63578671051408, 0.41615858996980, 0.47946322494889, 0.44837291206650, 0.86113981139333,
        0.44240231300194, 0.81776055937064, 0.69988784992829, 0.10562920332902, 0.94362262454839,
        0.34446241130104, 0.78473929476074, 0.26906158668602, 0.94517411310940, 0.84192915269131,
        0.63931696104011, 0.36581617683817, 0.48485333355210, 0.68779608512011
    };

    // Input IMU measurements
    y_imu_t imu = {
        .array = {
            0.359228210401861,
            0.736340074301202,
            0.394707475278763,
            0.683415866967978,
            0.704047430334266,
            0.442305413383371,
            0.019577623553319,
            0.330857880214071,
            0.424309496833137,
            0.270270423432065
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    const y_imu_t bias = {
        .array = {
            0.591161394286367,
            2.465163554883929,
            1.289764228149799,
            2.663312862769061,
            1.173548986383490,
            2.307343162164887,
            1.190374551040850,
            2.425542287662036,
            2.265231297021251,
            1.132186634505309
        }
    };

    static double R_MTI_arr[SIZE_IMU_MEAS * SIZE_IMU_MEAS] = {};
    static arm_matrix_instance_f64 R_MTI = {
        .numRows = SIZE_IMU_MEAS, .numCols = SIZE_IMU_MEAS, .pData = R_MTI_arr
    };
    static const double R_MTI_diag[SIZE_IMU_MEAS] = {1e-6, 1e-6, 1e-6, 2e-3, 2e-3, 2e-3, 2e1};
    math_init_matrix_diag(&R_MTI, (uint16_t)SIZE_IMU_MEAS, R_MTI_diag);

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.723179081230386,
            -0.153989080425476,
            -0.381122182392459,
            -0.555018253455596,
            -1.97897549594792,
            -0.48583527686721,
            -1.86836807892683,
            7987.96666566191,
            11686.8470862387,
            6025.53374807468,
            11060.2191235522,
            -1264.4060982824,
            9433.86503420725
        }
    };

    double expected_P_flat[SIZE_STATE * SIZE_STATE] = {
        -0.163978084930235,    0.0349860419601669,    0.0867100109575173,    0.126161041708058,
        -8.09194795097569e-07, 1.37392035069908e-07,  4.21794095304783e-08,  0.262113169579053,
        0.254320699825006,     -0.00255203520656147,  0.113972727030115,     0.461384195229064,
        0.22929935470827,      0.0350189391197854,    -0.00742952362297599,  -0.0185131293161802,
        -0.0269361724029537,   1.72575218304366e-07,  -2.93089056007585e-08, -8.99336830236521e-09,
        -0.0559565027344868,   -0.0542130826168166,   0.000499656147062183,  -0.0243208484474938,
        -0.0984332553141082,   -0.0489414299112613,   0.0867453017385923,    -0.0185032714142461,
        -0.0458186001204408,   -0.0667235113974018,   4.27815087772138e-07,  -7.26737695737661e-08,
        -2.23324088247257e-08, -0.138559956914358,    -0.134446485029591,    0.00135013390143878,
        -0.0602610451754393,   -0.243975902017108,    -0.121256750025849,    0.126148057301849,
        -0.0269080997506536,   -0.0666895055254783,   -0.0969914512526653,   6.22419407389916e-07,
        -1.05650596398947e-07, -3.24358898305232e-08, -0.20158593760847,     -0.19560562047685,
        0.00198620011688228,   -0.0876707181104074,   -0.354856742248204,    -0.176352576830279,
        -7.98089899802329e-08, 1.70281147913849e-08,  4.22026706849587e-08,  6.13689803466446e-08,
        1.00000151498593e-06,  -2.89084287399603e-13, -1.32191594037342e-12, 7.31632748991522e-08,
        -1.27177234039479e-07, -9.62179578813192e-08, 1.51407121536313e-08,  -9.8012763689943e-07,
        4.14881330201681e-07,  -4.07087874543469e-07, 8.69336800357231e-08,  2.1524524612784e-07,
        3.13072113676675e-07,  1.72513968735302e-12,  9.9999985807263e-07,   8.6211868733385e-13,
        -9.77150241741962e-08, -7.23986681972393e-07, 4.03101347602323e-07,  -2.68175794365517e-07,
        -6.90754019315845e-07, -1.02843266849281e-06, -4.25557707058539e-07, 9.08652868321849e-08,
        2.24954577138654e-07,  3.27248852202708e-07,  3.26240329427864e-13,  1.06898646953951e-12,
        1.00000014425722e-06,  1.00896154946767e-07,  -6.13635189026101e-07, 6.54845360806031e-07,
        -5.46539910530287e-08, 1.29635141459859e-06,  5.34286709244409e-07,  -0.313898924979857,
        0.066978706510446,     0.165939121877969,     0.241449846739144,     6.68458854228288e-07,
        -2.77592131760449e-07, -5.92265232409182e-08, -0.0604245081021983,   0.330540546026452,
        -0.0505520516778667,   0.131231771341726,     0.122969720932929,     0.531586448297693,
        -0.231142485076323,    0.0493024974267203,    0.122201551788072,     0.177789192586209,
        -6.80479260278688e-07, 2.11009312142482e-07,  3.04370560382597e-07,  0.0508156132808697,
        0.699596341636783,     -0.396304215436375,    0.192000503661778,     0.491655961158923,
        0.367703863133523,     -0.506783350292255,    0.108158427456668,     0.267903174476907,
        0.389810138179739,     9.41212750062207e-07,  -3.38531437661635e-07, 1.78483025346308e-07,
        0.196372372165925,     -0.108933947214091,    0.747013022510454,     0.0990111136684475,
        -0.0791475196010194,   0.987776717341748,     0.0351219469506752,    -0.00750387991237841,
        -0.0185757064738942,   -0.0270118159502648,   -2.30485104136936e-07, -7.25747086781497e-08,
        8.10965838576738e-08,  0.0157904567165779,    0.0713378769368507,    0.0681910813249073,
        0.181696878405286,     0.211611456649959,     0.143333349521756,     0.291877486270898,
        -0.0622813072606576,   -0.1543183764802,      -0.224477824434406,    1.21219502179782e-06,
        -8.56772982615492e-07, 4.5485780525621e-07,   0.0636948343433851,    -0.476976157328173,
        0.0647838064720796,    -0.0207130886388065,   -0.878025634669975,    -0.614403860302262,
        0.299000946501842,     -0.0638080856799118,   -0.158089264874326,    -0.229979980549067,
        8.26726546941912e-07,  -7.09656701383736e-07, -7.39075509007495e-07, 0.541461295158932,
        -0.0142674965274434,   0.248968724086672,     0.154912885123815,     -0.831411233172878,
        0.470863895999122
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_matrix_correct_imu(&state, P_flat, &R_MTI, &imu, &bias);

    // Assert
    double tolerance = 1e-6;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
    }

    // do it again!

    // Arrange
    // Initial state estimate
    x_state_t state2 = {
        .array = {
            8.834741558736747,
            1.407644570039071,
            7.699705252613202,
            5.802880831830792,
            3.386449892509485,
            1.718313257126727,
            3.854276936814474,
            4.338198549286707,
            1.085504519674461,
            5.305567362255530,
            2.035689117774082,
            3.461572119324697,
            5.246877444729065
        }
    };

    // Covariance matrix

    double P_flat2[SIZE_STATE * SIZE_STATE] = {
        0.25180612247231, 0.26072799905547, 0.63853075827184, 0.61095865874620, 0.63770909807217,
        0.78051965273136, 0.47135715371061, 0.76550001662144, 0.20893492242602, 0.83291681907522,
        0.54471611052676, 0.76350464084881, 0.39345636121527, 0.29044066427698, 0.59435625066433,
        0.03360383606643, 0.77880224182409, 0.95769393984158, 0.67533206574700, 0.03576273326912,
        0.18866197679149, 0.70928170271055, 0.25644099222915, 0.64731148029313, 0.62789637961417,
        0.67143113967403, 0.61709088439322, 0.02251259274023, 0.06880609911805, 0.42345291896274,
        0.24070703548016, 0.00671531431848, 0.17587441568353, 0.28749817306613, 0.23623057699380,
        0.61346073681288, 0.54388593399964, 0.77198038555425, 0.74125794345421, 0.26528090981003,
        0.42525932021414, 0.31959973518050, 0.09082328578744, 0.67612230386375, 0.60217048758180,
        0.72175803339110, 0.09111346368654, 0.11939624779731, 0.58224916452723, 0.72104662057981,
        0.93285357027882, 0.52005246739039, 0.82437626668884, 0.31271888682062, 0.53086428069413,
        0.26647149077907, 0.28906457167448, 0.38677119452099, 0.47348599296532, 0.57620938066301,
        0.60730394068564, 0.54073933712441, 0.52249530577710, 0.97274085400301, 0.34771267127753,
        0.98266339972195, 0.16148474431175, 0.65444570775707, 0.15365671759131, 0.67180816541422,
        0.91599124413143, 0.15272120043823, 0.68336324329465, 0.45013769696590, 0.86994103235801,
        0.99370462412085, 0.19202834942778, 0.14999725383168, 0.73024879226760, 0.17876618675237,
        0.40761919704115, 0.28100530253387, 0.69514049955174, 0.00115105712911, 0.34112460704911,
        0.54659311459032, 0.45872549364887, 0.26477902647563, 0.21867663239963, 0.13887420282916,
        0.58609206723146, 0.34387700411498, 0.42288568910009, 0.81998122278194, 0.44008513900172,
        0.06799276847001, 0.46244915924233, 0.60738921376835, 0.42572884187119, 0.66194475190565,
        0.31807407548106, 0.10579827325023, 0.69626633708300, 0.26214531772781, 0.58406933327845,
        0.09422933888774, 0.71835894320588, 0.52714274176065, 0.25479015659701, 0.42434903981538,
        0.19174525546180, 0.64444278143134, 0.77028551480366, 0.11921454105419, 0.10969746452319,
        0.09382002677487, 0.04445409227824, 0.10776901524374, 0.59852366875674, 0.96864933023109,
        0.45742436568767, 0.22404003082422, 0.46091636602896, 0.73842683997694, 0.64761763017268,
        0.35021801344111, 0.93982947034492, 0.06359137097511, 0.52540440385934, 0.75493326723118,
        0.90630815064973, 0.47092425635833, 0.53133390656567, 0.87537159860419, 0.66783272701372,
        0.77015972860861, 0.24284959831817, 0.67901675409320, 0.66200959835914, 0.64555187497252,
        0.40457999585763, 0.53034421839286, 0.24278535782096, 0.87965372448191, 0.69594931330161,
        0.32514568182056, 0.51805210836110, 0.84439215652721, 0.32247180718678, 0.91742434204938,
        0.63578671051408, 0.41615858996980, 0.47946322494889, 0.44837291206650, 0.86113981139333,
        0.44240231300194, 0.81776055937064, 0.69988784992829, 0.10562920332902, 0.94362262454839,
        0.34446241130104, 0.78473929476074, 0.26906158668602, 0.94517411310940, 0.84192915269131,
        0.63931696104011, 0.36581617683817, 0.48485333355210, 0.68779608512011
    };

    // Input IMU measurements
    y_imu_t imu2 = {
        .array = {
            0.359228210401861,
            0.736340074301202,
            0.394707475278763,
            0.683415866967978,
            0.704047430334266,
            0.442305413383371,
            0.019577623553319,
            0.330857880214071,
            0.424309496833137,
            0.270270423432065
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    const y_imu_t bias2 = {
        .array = {
            0.591161394286367,
            2.465163554883929,
            1.289764228149799,
            2.663312862769061,
            1.173548986383490,
            2.307343162164887,
            1.190374551040850,
            2.425542287662036,
            2.265231297021251,
            1.132186634505309
        }
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_matrix_correct_imu(&state2, P_flat2, &R_MTI, &imu2, &bias2);

    // Assert
    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state2.array[i], expected_state.array[i], tolerance);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat2[i], expected_P_flat[i], tolerance);
    }
}

TEST_F(EstimatorEKFTest, EKFCorrectEncoder) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            2.426878243614206,
            4.001402344444001,
            0.709431693136077,
            2.108806413131375,
            4.578677625945335,
            3.961036647797772,
            4.797462131964515,
            3.278703495782934,
            0.178558392870948,
            4.245646529343886,
            4.669966238787753,
            3.393675774288867,
            3.788700652891667
        }
    };

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.50150522974397,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31864903478599, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 1.11722922016661, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.59435520762892, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        1.46906291404807, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.01848024017227,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 2.85489139433318, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 2.76099611950969, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.15803099304238, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        2.21357428655099, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.80735827919567,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 1.26850684502642
    };

    const double R = 0.01;
    const double encoder = 0.431651170248720; // encoder revival

    // expected outputs:
    x_state_t expected_state = {
        .array = {
            0.468344253752577,
            0.772199347002077,
            0.136907674616354,
            0.406962058548029,
            4.57867762594533,
            3.96103664779777,
            4.79746213196452,
            3.27870349578293,
            0.178558392870948,
            4.24564652934389,
            4.66996623878775,
            3.39367577428887,
            0.457908749515521
        }
    };

    double expected_P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.50150522974397,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.31864903478599,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1.11722922016661,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.59435520762892,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1.46906291404807,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1.01848024017227,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2.85489139433318,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2.76099611950969,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.15803099304238,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2.21357428655099,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.80735827919567,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.00992178375861731
    };

    // action
    ekf_matrix_correct_encoder(&state, P_flat, R, encoder);

    // assert
    // Assert
    // Check state (x)
    double tolerance = 1e-6;
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
    }
}

TEST_F(EstimatorEKFTest, EKFAlgorithmSelectIMU1) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            2.426878243614206,
            4.001402344444001,
            0.709431693136077,
            2.108806413131375,
            4.578677625945335,
            3.961036647797772,
            4.797462131964515,
            3.278703495782934,
            0.178558392870948,
            4.245646529343886,
            4.669966238787753,
            3.393675774288867,
            3.788700652891667
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.50150522974397,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31864903478599, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 1.11722922016661, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.59435520762892, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        1.46906291404807, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.01848024017227,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 2.85489139433318, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 2.76099611950969, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.15803099304238, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        2.21357428655099, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.80735827919567,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 1.26850684502642
    };

    // Input IMU measurements
    y_imu_t imu_1 = {
        .array = {
            2.711216972515416,
            4.238310136658316,
            2.074393441904026,
            7.598779134258502,
            1.752878606103443,
            2.033296028751589,
            1.536372424330727,
            2.048978680348982,
            3.921288156935092,
            2.799920579853715
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_1 = {
        .array = {
            0.942736984276934,
            0.417744104316662,
            0.983052466469856,
            0.301454948712065,
            0.701098755900926,
            0.666338851584426,
            0.539126465042857,
            0.698105520180308,
            0.666527913402587,
            0.178132454400338
        }
    };

    // Input IMU measurements
    y_imu_t imu_2 = {
        .array = {
            7.387037136825951,
            3.441659130636672,
            1.478530560993089,
            7.239047749439143,
            7.837987026848682,
            3.510959785008826,
            0.888953787524790,
            2.064517567296535,
            3.269758768900417,
            4.759168592068915
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_2 = {
        .array = {
            0.128014399720173,
            0.999080394761361,
            0.171121066356432,
            0.032600820530528,
            0.561199792709660,
            0.881866500451810,
            0.669175304534394,
            0.190433267179954,
            0.368916546063895,
            0.460725937260412
        }
    };

    const double cmd = 0.547870901214845;
    const double encoder = 0.431651170248720; // this is unused
    const double dt = 1.038711463665142;
    const bool is_dead_mti = false;
    const bool is_dead_altimu = true;
    const bool is_dead_encoder = false;

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.599158306501523,
            -0.097816004784804,
            0.539024429234067,
            0.583861300008019,
            7.29732417848082,
            1.05179865419804,
            1.3669825170801,
            -1100.90202418794,
            14762.30757357,
            6394.61965135776,
            8414.65105042361,
            3.40080537706833,
            0.431226793835345
        }
    };

    double expected_P_flat[SIZE_STATE * SIZE_STATE] = {
        0.341894339504392,     -0.055904803410355,    0.306963762327388,     0.332711034703971,
        -6.89031162805651e-11, -2.99697460024041e-08, -2.50033535029185e-08, 0.265375246924925,
        5.17872927805956,      -2.49004189307547,     0.0393047004619131,    2.44165560593005e-05,
        -4.75500812677364e-09, -0.055904803410355,    0.0095612709152174,    -0.0502532472751363,
        -0.0544683181339908,   1.12740959580346e-11,  4.90097587817422e-09,  4.08760962220021e-09,
        -0.0445352344255318,   -0.848273330327797,    0.407288549833796,     -0.00642834594433768,
        -3.99509646060707e-06, 7.78026028375745e-10,  0.306963762327386,     -0.0502532472751358,
        0.27634110833989,      0.29907640639565,      -6.19105691748601e-11, -2.69277824727454e-08,
        -2.24664696515775e-08, 0.239364246456384,     4.65423757204103,      -2.23938849137,
        0.0353145187151527,    2.19386722186257e-05,  -4.27245203774153e-09, 0.332711034703969,
        -0.0544683181339903,   0.29907640639565,      0.324571012238819,     -6.70705177227944e-11,
        -2.91676087620948e-08, -2.43319829977953e-08, 0.256839680419337,     5.04388434405654,
        -2.42521931985371,     0.0382570851838899,    2.37671551637328e-05,  -4.62854039199324e-09,
        -6.89031162805651e-11, 1.12740959580346e-11,  -6.19105691748601e-11, -6.70705177227943e-11,
        1.99999999999929e-07,  -8.67727053237424e-18, -6.94415439829163e-18, 1.37892712850902e-09,
        -3.09445803907702e-10, -9.48906242274693e-10, -1.25341972894412e-13, 2.5313550307898e-14,
        -4.92969348909057e-18, -2.99697460024041e-08, 4.90097587817422e-09,  -2.69277824727454e-08,
        -2.91676087620948e-08, -8.67727053237424e-18, 1.99999984545273e-07,  -1.67599502962e-14,
        -8.56395163971921e-08, -4.74871335780324e-07, 2.84146085589979e-07,  2.98470069966644e-10,
        3.07488360226224e-12,  -5.98818952276878e-16, -2.50033535029185e-08, 4.08760962220022e-09,
        -2.24664696515775e-08, -2.43319829977953e-08, -6.94415439829164e-18, -1.67599502962001e-14,
        1.99999978063668e-07,  -9.99326405603354e-08, -7.63915328032088e-07, 2.65589889464351e-07,
        4.098811767501e-10,    2.46073536733528e-12,  -4.79216505435936e-16, 0.265375246924918,
        -0.0445352344255316,   0.239364246456378,     0.256839680419331,     1.37892712850902e-09,
        -8.56395163971923e-08, -9.99326405603355e-08, 74.4909634212705,      -0.782775185323704,
        -54.0946086954795,     -0.0178226190996667,   -0.000488637573340457, 9.51598426345551e-08,
        5.17872927805956,      -0.848273330327797,    4.65423757204103,      5.04388434405656,
        -3.09445803907702e-10, -4.74871335780324e-07, -7.63915328032087e-07, -0.782775185323639,
        133.561651634645,      -85.1430752900994,     0.242779141226167,     0.000109655429627627,
        -2.13548732162664e-08, -2.49004189307544,     0.407288549833795,     -2.23938849136999,
        -2.4252193198537,      -9.48906242274693e-10, 2.8414608558998e-07,   2.65589889464351e-07,
        -54.0946086954795,     -85.1430752900993,     102.75170969634,       0.105360562355011,
        0.000336255073938583,  -6.54840758608052e-08, 0.0393047004619131,    -0.00642834594433768,
        0.0353145187151527,    0.0382570851838899,    -1.25341972894412e-13, 2.98470069966644e-10,
        4.098811767501e-10,    -0.0178226190996669,   0.242779141226167,     0.105360562355011,
        0.138351277814734,     4.44162684209822e-08,  -8.64985695729527e-12, 2.44165560593005e-05,
        -3.99509646060707e-06, 2.19386722186257e-05,  2.37671551637328e-05,  2.5313550307898e-14,
        3.07488360226224e-12,  2.46073536733528e-12,  -0.000488637573340457, 0.000109655429627627,
        0.000336255073938583,  4.44162684209822e-08,  31.8870186407149,      1.7468896028074e-12,
        -4.75500812677364e-09, 7.78026028375745e-10,  -4.27245203774153e-09, -4.62854039199325e-09,
        -4.92969348909057e-18, -5.98818952276879e-16, -4.79216505435936e-16, 9.51598426345551e-08,
        -2.13548732162664e-08, -6.54840758608052e-08, -8.64985695729526e-12, 1.7468896028074e-12,
        0.0019999781057431
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_algorithm(
        &state,
        P_flat,
        &imu_1,
        &bias_1,
        &imu_2,
        &bias_2,
        cmd,
        encoder,
        dt,
        is_dead_mti,
        is_dead_altimu,
        is_dead_encoder
    );

    // Assert
    double tolerance = 1e-6;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        double tol = abs(expected_state.array[i]) > 90 ? abs(tolerance * expected_state.array[i])
                                                       : tolerance;
        EXPECT_NEAR(state.array[i], expected_state.array[i], tol);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        double tol = expected_state.array[i] > 90 ? tolerance * expected_state.array[i] : tolerance;
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tol);
    }
}

TEST_F(EstimatorEKFTest, EKFAlgorithmSelectIMU2) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            2.426878243614206,
            4.001402344444001,
            0.709431693136077,
            2.108806413131375,
            4.578677625945335,
            3.961036647797772,
            4.797462131964515,
            3.278703495782934,
            0.178558392870948,
            4.245646529343886,
            4.669966238787753,
            3.393675774288867,
            3.788700652891667
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.50150522974397,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31864903478599, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 1.11722922016661, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.59435520762892, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        1.46906291404807, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.01848024017227,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 2.85489139433318, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 2.76099611950969, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.15803099304238, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        2.21357428655099, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.80735827919567,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 1.26850684502642
    };

    // Input IMU measurements
    y_imu_t imu_1 = {
        .array = {
            2.711216972515416,
            4.238310136658316,
            2.074393441904026,
            7.598779134258502,
            1.752878606103443,
            2.033296028751589,
            1.536372424330727,
            2.048978680348982,
            3.921288156935092,
            2.799920579853715
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_1 = {
        .array = {
            0.942736984276934,
            0.417744104316662,
            0.983052466469856,
            0.301454948712065,
            0.701098755900926,
            0.666338851584426,
            0.539126465042857,
            0.698105520180308,
            0.666527913402587,
            0.178132454400338
        }
    };

    // Input IMU measurements
    y_imu_t imu_2 = {
        .array = {
            7.387037136825951,
            3.441659130636672,
            1.478530560993089,
            7.239047749439143,
            7.837987026848682,
            3.510959785008826,
            0.888953787524790,
            2.064517567296535,
            3.269758768900417,
            4.759168592068915
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_2 = {
        .array = {
            0.128014399720173,
            0.999080394761361,
            0.171121066356432,
            0.032600820530528,
            0.561199792709660,
            0.881866500451810,
            0.669175304534394,
            0.190433267179954,
            0.368916546063895,
            0.460725937260412
        }
    };

    const double cmd = 0.547870901214845;
    const double encoder = 0.431651170248720; // this is unused
    const double dt = 1.038711463665142;
    const bool is_dead_mti = true;
    const bool is_dead_altimu = false;
    const bool is_dead_encoder = false;

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.614973986401843,
            0.398150592992864,
            0.58139693921111,
            0.353921884636156,
            7.20644691007196,
            7.27678544750747,
            2.62909137933659,
            -3124.71371998049,
            7865.54702660452,
            5250.09415578803,
            8423.44723011937,
            3.40097637403712,
            0.431226760534499
        }
    };

    double expected_P_flat[SIZE_STATE * SIZE_STATE] = {
        0.335010428805248,     0.216461479167781,     0.316192792235419,     0.192344255769444,
        -1.6494854211876e-10,  -7.81860374750474e-08, -6.85323179805441e-08, -0.0301904910265853,
        4.03291249307787,      -2.52775241588555,     0.0593173908001705,    2.33805119010478e-05,
        -4.55324345610415e-09, 0.216461479167782,     0.140434514351876,     0.204548809213926,
        0.124429700602146,     -1.06603003228447e-10, -5.05368260127731e-08, -4.43007812760472e-08,
        -0.0209102880070514,   2.60601098824715,      -1.63478523160888,     0.0383399728979843,
        1.51103656549789e-05,  -2.94267182126112e-09, 0.316192792235416,     0.204548809213924,
        0.299194717067896,     0.181758851321902,     -1.55798824419355e-10, -7.38503943968953e-08,
        -6.47357817114992e-08, -0.0277388579187702,   3.80990074027049,      -2.38967482106592,
        0.0560261888617881,    2.2083591777873e-05,   -4.30067443242634e-09, 0.192344255769444,
        0.124429700602145,     0.181758851321903,     0.110969359468944,     -9.47262220864169e-11,
        -4.48937832408478e-08, -3.93480369146703e-08, -0.0188901137568107,   2.31777059913152,
        -1.45265410099246,     0.0340638092810979,    1.34268998948666e-05,  -2.61482487384406e-09,
        -1.6494854211876e-10,  -1.06603003228447e-10, -1.55798824419355e-10, -9.47262220864169e-11,
        4.99999999999549e-07,  -5.28394129767927e-17, -4.05839092400179e-17, 3.59260005568906e-09,
        -1.74228612871e-10,    -2.35521797609411e-09, -4.82154099959731e-13, 6.38834011301543e-14,
        -1.24409884343258e-17, -7.81860374750473e-08, -5.05368260127731e-08, -7.38503943968952e-08,
        -4.48937832408477e-08, -5.28394129767927e-17, 4.99999905546938e-07,  -1.02180793332202e-13,
        -1.50474167091518e-07, -1.00516195529683e-06, 7.67640283707691e-07,  -4.98875187529769e-11,
        7.48968440733483e-12,  -1.45858040492494e-15, -6.85323179805441e-08, -4.43007812760471e-08,
        -6.47357817114992e-08, -3.93480369146703e-08, -4.05839092400179e-17, -1.02180793332202e-13,
        4.99999865728664e-07,  -1.96518310298197e-07, -1.7982178164632e-06,  7.37256483062821e-07,
        -3.38579144730391e-11, 5.75253688700131e-12,  -1.12027919010459e-15, -0.0301904910265824,
        -0.0209102880070539,   -0.0277388579187842,   -0.0188901137568135,   3.59260005568906e-09,
        -1.50474167091518e-07, -1.96518310298197e-07, 74.2962209601831,      -5.10693921126819,
        -51.999233054237,      -0.0765936919597384,   -0.000509230498668288, 9.91702168679262e-08,
        4.03291249307787,      2.60601098824714,      3.80990074027049,      2.31777059913152,
        -1.74228612871e-10,    -1.00516195529683e-06, -1.7982178164632e-06,  -5.10693921126807,
        104.09274968882,       -78.3391512300586,     0.194405319505478,     2.46959088234959e-05,
        -4.80941074853405e-09, -2.52775241588556,     -1.63478523160889,     -2.38967482106593,
        -1.45265410099245,     -2.35521797609411e-09, 7.67640283707692e-07,  7.37256483062821e-07,
        -51.9992330542369,     -78.3391512300586,     104.233549608336,      0.129586707345298,
        0.000333838670001603,  -6.50134926905168e-08, 0.0593173908001705,    0.0383399728979843,
        0.0560261888617881,    0.0340638092810979,    -4.82154099959731e-13, -4.98875187529768e-11,
        -3.38579144730388e-11, -0.0765936919597385,   0.194405319505478,     0.129586707345298,
        0.207747401773583,     6.83425844657125e-08,  -1.33093931736287e-11, 2.33805119010478e-05,
        1.51103656549789e-05,  2.2083591777873e-05,   1.34268998948665e-05,  6.38834011301543e-14,
        7.48968440733483e-12,  5.7525368870013e-12,   -0.000509230498668287, 2.46959088234959e-05,
        0.000333838670001603,  6.83425844657124e-08,  31.8870186406299,      1.76343891502919e-12,
        -4.55324345610415e-09, -2.94267182126112e-09, -4.30067443242633e-09, -2.61482487384405e-09,
        -1.24409884343258e-17, -1.45858040492494e-15, -1.12027919010459e-15, 9.91702168679261e-08,
        -4.80941074853404e-09, -6.50134926905168e-08, -1.33093931736287e-11, 1.76343891502919e-12,
        0.0019999781057431
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_algorithm(
        &state,
        P_flat,
        &imu_1,
        &bias_1,
        &imu_2,
        &bias_2,
        cmd,
        encoder,
        dt,
        is_dead_mti,
        is_dead_altimu,
        is_dead_encoder
    );

    // Assert
    double tolerance = 1e-6;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        double tol = abs(expected_state.array[i]) > 90 ? abs(tolerance * expected_state.array[i])
                                                       : tolerance;
        EXPECT_NEAR(state.array[i], expected_state.array[i], tol);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        double tol = expected_state.array[i] > 90 ? tolerance * expected_state.array[i] : tolerance;
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tol);
    }
}

// clang-format off
/*
clear;

% Define state vector
x = [ ...
    2.426878243614206;
    4.001402344444001;
    0.709431693136077;
    2.108806413131375;
    4.578677625945335;
    3.961036647797772;
    4.797462131964515;
    3.278703495782934;
    0.178558392870948;
    4.245646529343886;
    4.669966238787753;
    3.393675774288867;
    3.788700652891667
];

% Define corrected diagonal covariance matrix P (13x13)
P = diag([ ...
    2.95219117313746;
    0.50150522974397;
    0.31864903478599;
    1.11722922016661;
    0.59435520762892;
    1.46906291404807;
    1.01848024017227;
    2.85489139433318;
    2.76099611950969;
    0.15803099304238;
    2.21357428655099;
    0.80735827919567;
    1.26850684502642
]);

% Correct IMU measurements
IMU_1 = [ ...
    2.711216972515416;
    4.238310136658316;
    2.074393441904026;
    7.598779134258502;
    1.752878606103443;
    2.033296028751589;
    1.536372424330727;
    2.048978680348982;
    3.921288156935092;
    2.799920579853715
];

IMU_2 = [ ...
    7.387037136825951;
    3.441659130636672;
    1.478530560993089;
    7.239047749439143;
    7.837987026848682;
    3.510959785008826;
    0.888953787524790;
    2.064517567296535;
    3.269758768900417;
    4.759168592068915
];

% IMU biases
bias_1 = [ ...
    0.942736984276934;
    0.417744104316662;
    0.983052466469856;
    0.301454948712065;
    0.701098755900926;
    0.666338851584426;
    0.539126465042857;
    0.698105520180308;
    0.666527913402587;
    0.178132454400338
];

bias_2 = [ ...
    0.128014399720173;
    0.999080394761361;
    0.171121066356432;
    0.032600820530528;
    0.561199792709660;
    0.881866500451810;
    0.669175304534394;
    0.190433267179954;
    0.368916546063895;
    0.460725937260412
];

% Bias struct
b.bias_1 = bias_1;
b.bias_2 = bias_2;

% Inputs
cmd = 0.547870901214845;
encoder = 0.431651170248720;
T = 1.038711463665142;

% Global IMU selector
global IMU_select;
IMU_select = [1 1];

% Call EKF (make sure ekf_algorithm.m is available)
[xhat, Phat] = ekf_algorithm(x, P, b, 0, T, IMU_1, IMU_2, cmd, encoder, []);

% Display results
disp('Corrected state x:');
disp(xhat);

disp('Corrected covariance P:');
disp(Phat);

% Assuming xhat and Phat are already computed

% Convert xhat (13x1 vector) into C array format, row-major order
xhat_c = reshape(xhat, 1, []);  % Flatten the vector to a row vector

% Display xhat in C array format
disp('xhat in C array format (row-major):');
fprintf('float xhat[] = { ');
fprintf('%f, ', xhat_c(1:end-1));  % Print all except the last element
fprintf('%f }; \n', xhat_c(end));  % Print the last element

% Convert Phat (13x13 matrix) into C array format, row-major order
Phat_c = reshape(Phat, 1, []);  % Flatten the matrix to a row vector

% Display Phat in C array format
disp('Phat in C array format (row-major):');
fprintf('float Phat[] = { ');
fprintf('%f, ', Phat_c(1:end-1));  % Print all except the last element
fprintf('%f }; \n', Phat_c(end));  % Print the last element

*/
// clang-format on
TEST_F(EstimatorEKFTest, EKFAlgorithmSelectBoth) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            2.426878243614206,
            4.001402344444001,
            0.709431693136077,
            2.108806413131375,
            4.578677625945335,
            3.961036647797772,
            4.797462131964515,
            3.278703495782934,
            0.178558392870948,
            4.245646529343886,
            4.669966238787753,
            3.393675774288867,
            3.788700652891667
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.50150522974397,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31864903478599, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 1.11722922016661, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.59435520762892, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        1.46906291404807, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.01848024017227,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 2.85489139433318, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 2.76099611950969, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.15803099304238, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        2.21357428655099, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.80735827919567,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 1.26850684502642
    };

    // Input IMU measurements
    y_imu_t imu_1 = {
        .array = {
            2.711216972515416,
            4.238310136658316,
            2.074393441904026,
            7.598779134258502,
            1.752878606103443,
            2.033296028751589,
            1.536372424330727,
            2.048978680348982,
            3.921288156935092,
            2.799920579853715
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_1 = {
        .array = {
            0.942736984276934,
            0.417744104316662,
            0.983052466469856,
            0.301454948712065,
            0.701098755900926,
            0.666338851584426,
            0.539126465042857,
            0.698105520180308,
            0.666527913402587,
            0.178132454400338
        }
    };

    // Input IMU measurements
    y_imu_t imu_2 = {
        .array = {
            7.387037136825951,
            3.441659130636672,
            1.478530560993089,
            7.239047749439143,
            7.837987026848682,
            3.510959785008826,
            0.888953787524790,
            2.064517567296535,
            3.269758768900417,
            4.759168592068915
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_2 = {
        .array = {
            0.128014399720173,
            0.999080394761361,
            0.171121066356432,
            0.032600820530528,
            0.561199792709660,
            0.881866500451810,
            0.669175304534394,
            0.190433267179954,
            0.368916546063895,
            0.460725937260412
        }
    };

    const double cmd = 0.547870901214845;
    const double encoder = 0.431651170248720; // this is unused
    const double dt = 1.038711463665142;
    const bool is_dead_mti = false;
    const bool is_dead_altimu = false;
    const bool is_dead_encoder = false;

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.68642328082328,
            0.44220055151937,
            0.514020412913625,
            0.262801763479387,
            7.27135927735316,
            2.83037984951354,
            1.72759699326249,
            -1338.00840460378,
            13024.1929674689,
            8325.07307799213,
            9076.29394280653,
            3.38725102273794,
            0.431229433481364
        }

    };

    double expected_P_flat[SIZE_STATE * SIZE_STATE] = {
        0.000296005114641691,  -3.80373061757156e-05, 9.07755715879799e-05,  1.96255042699591e-05,
        -3.583742230567e-14,   -1.66280360463149e-11, -1.42345981575444e-11, 0.000582736940443361,
        0.00283765209589548,   -0.00119755536555746,  2.63869618016538e-05,  1.77791233426645e-08,
        -3.46239968388534e-12, -3.80373061757197e-05, 0.000237562826374296,  -4.31098076717198e-05,
        5.10216574600838e-05,  7.96858176068937e-15,  2.97825049325274e-12,  2.30893971928945e-12,
        -0.000996103900718547, -0.000894294941358027, 0.000179290157664914,  -4.59335227271987e-06,
        -3.95325302085142e-09, 7.69877217560313e-13,  9.07755715879902e-05,  -4.31098076717274e-05,
        0.000293535025449245,  5.37719595844146e-07,  -2.39654259710706e-14, -1.12724085237804e-11,
        -1.01393927258193e-11, 0.00104202131519007,   0.00213513645358632,   -0.00165664874099464,
        1.71705966733176e-05,  1.18893669490245e-08,  -2.31539764770623e-12, 1.96255042699378e-05,
        5.10216574600914e-05,  5.37719595845203e-07,  0.000390879672247805,  4.85224605632894e-16,
        1.97285582041426e-12,  2.66254530102108e-12,  -0.00140422884675873,  0.00124776391814457,
        -0.000240287938936335, -7.56995311901483e-07, -2.40722338763676e-10, 4.6879530197377e-14,
        -3.58374223058235e-14, 7.96858176074682e-15,  -2.39654259710411e-14, 4.85224605776795e-16,
        1.42857142857099e-07,  -7.51791534906858e-18, -6.12191879863287e-18, 1.02328687648024e-09,
        5.2568763578906e-10,   -1.03778346401216e-09, 5.02498352587837e-12,  2.1605397737671e-14,
        -4.20754841818367e-18, -1.66280360463838e-11, 2.97825049328096e-12,  -1.12724085237718e-11,
        1.9728558204828e-12,   -7.51791534906858e-18, 1.42857133627322e-07,  -9.67311690193178e-15,
        -4.4489130860573e-08,  -1.43623753754378e-08, 4.63177333832749e-08,  2.41317222917529e-09,
        3.72967517392615e-12,  -7.26336495579994e-16, -1.42345981576034e-11, 2.30893971931483e-12,
        -1.01393927258148e-11, 2.66254530108122e-12,  -6.12191879863287e-18, -9.67311690193179e-15,
        1.42857130728779e-07,  -5.7459547987029e-08,  -2.74628111046752e-07, 5.8989615021261e-08,
        2.11699742781381e-09,  3.03711434618928e-12,  -5.91463569350109e-16, 0.000582736940443752,
        -0.000996103900719224, 0.00104202131518998,   -0.00140422884675917,  1.02328687648024e-09,
        -4.44891308605734e-08, -5.74595479870293e-08, 74.2832441654273,      -4.81096343862509,
        -52.1493908452339,     -0.0435916601076128,   -0.00050765770586668,  9.88639229526332e-08,
        0.00283765209590624,   -0.000894294941360032, 0.00213513645357802,   0.00124776391814065,
        5.25687635789062e-10,  -1.43623753754366e-08, -2.7462811104675e-07,  -4.81096343862511,
        55.0281594177352,      -47.3198975846362,     -0.318168294071739,    -0.000260796249146763,
        5.07888287403491e-08,  -0.00119755536556002,  0.00017929015766747,   -0.00165664874099386,
        -0.000240287938934134, -1.03778346401215e-09, 4.63177333832761e-08,  5.89896150212618e-08,
        -52.1493908452338,     -47.3198975846364,     84.4972056164638,      0.353544342579043,
        0.000514849534999347,  -1.00264497459912e-07, 2.63869618017683e-05,  -4.59335227276487e-06,
        1.71705966733009e-05,  -7.56995312012439e-07, 5.02498352587837e-12,  2.41317222917529e-09,
        2.11699742781381e-09,  -0.0435916601076135,   -0.318168294071737,    0.353544342579045,
        0.12083445409499,      -2.4929193048383e-06,  4.8548417414428e-10,   1.77791233427402e-08,
        -3.95325302087854e-09, 1.18893669490045e-08,  -2.40722338826046e-10, 2.1605397737671e-14,
        3.72967517392615e-12,  3.03711434618929e-12,  -0.000507657705866681, -0.000260796249146762,
        0.000514849534999348,  -2.4929193048383e-06,  31.8870186389665,      2.08738568469206e-12,
        -3.46239968389981e-12, 7.69877217565792e-13,  -2.31539764770312e-12, 4.68795302106603e-14,
        -4.20754841818368e-18, -7.26336495579994e-16, -5.91463569350109e-16, 9.88639229526332e-08,
        5.07888287403489e-08,  -1.00264497459912e-07, 4.8548417414428e-10,   2.08738568469206e-12,
        0.00199997810574304
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_algorithm(
        &state,
        P_flat,
        &imu_1,
        &bias_1,
        &imu_2,
        &bias_2,
        cmd,
        encoder,
        dt,
        is_dead_mti,
        is_dead_altimu,
        is_dead_encoder
    );

    // Assert
    double tolerance = 1e-6;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
    }
}
