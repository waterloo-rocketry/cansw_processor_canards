#include "fff.h"
#include <gtest/gtest.h>

extern "C" {
#include "application/estimator/ekf.h"
#include "application/estimator/estimator_types.h"
#include "arm_math.h"
#include "common/math/math-algebra3d.h"
#include "third_party/rocketlib/include/common.h"

DEFINE_FFF_GLOBALS;
FAKE_VALUE_FUNC(w_status_t, log_text, const char *, const char *);
}

class EstimatorEKFTest : public ::testing::Test {
protected:
    void SetUp() override {
        FFF_RESET_HISTORY();
    }

    void TearDown() override {}
};

// commenting out because predict is covered by ekf_algorithm and no time :skulll
// TEST_F(EstimatorEKFTest, EKFPredictNominalCheckWithAllZerosP) {
//     // Arrange
//     x_state_t state = {
//         .array = {
//             0.814723686393179,
//             0.905791937075619,
//             0.126986816293506,
//             0.913375856139019,
//             0.632359246225410,
//             0.097540404999410,
//             0.278498218867048,
//             0.546881519204984,
//             0.957506835434298,
//             0.964888535199277,
//             0.157613081677548,
//             0.970592781760616,
//             0.957166948242946
//         }
//     };
//     double P_flat[SIZE_STATE * SIZE_STATE] = {0};
//     const u_dynamics_t input = {
//         .cmd = 4.217612826262750,
//         .acceleration = {.array = {1.456126946168524, 2.400841406666400, 0.425659015881646}}
//     };
//     double dt = 0.915735525189067;

//     // set up Q like ekf_algorithm would
//     static double Q_diag[SIZE_STATE] = {
//         1e-9, 1e-9, 1e-9, 1e-9, 1e0, 1e0, 1e0, 1e-3, 1e-3, 1e-3, 1e-2, 1, 0
//     };
//     double Q_arr[SIZE_STATE * SIZE_STATE] = {0};
//     arm_matrix_instance_f64 Q = {.numRows = SIZE_STATE, .numCols = SIZE_STATE, .pData = Q_arr};
//     math_init_matrix_diag(&Q, (uint16_t)SIZE_STATE, Q_diag);

//     x_state_t expected_state = {
//         .array = {
//             0.268274165208879,
//             0.696419511023482,
//             0.194712315844409,
//             0.636487196262266,
//             1.55182552860322,
//             0.214769904048368,
//             0.263669144587128,
//             -0.400684442488099,
//             8.41693588011966,
//             -6.31409592104001,
//             0.525564693616072,
//             2.57823963701674,
//             43.6101114976571
//         }
//     };

//     double expected_P_flat[169] = {
//         9.15735525189067e-10,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         9.15735525189067e-10,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         9.15735525189067e-10,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         9.15735525189067e-10,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0.915735525189067,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0.915735525189067,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0.915735525189067,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0.000915735525189067,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0.000915735525189067,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0.000915735525189067,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0.00915735525189067,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0.915735525189067,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0,
//         0
//     };

//     // Act
//     ekf_matrix_predict(&state, P_flat, &input, Q.pData, dt);

//     // Assert
//     double tolerance = 1e-6;

//     // check x
//     for (int i = 0; i < SIZE_STATE; i++) {
//         EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
//     }

//     // check P
//     for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
//         EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
//     }
// }

// clang-format off
/**
 clear all;
clc;

% === SIZE DEFINITIONS ===
SIZE_STATE = 13;

% === STATE VECTOR ===
x = [
    0.814723686393179;
    0.905791937075619;
    0.126986816293506;
    0.913375856139019;
    0.632359246225410;
    0.097540404999410;
    0.278498218867048;
    0.546881519204984;
    0.957506835434298;
    0.964888535199277;
    0.157613081677548;
    0.970592781760616;
    0.957166948242946
];

% === ZERO INITIAL COVARIANCE ===
P = zeros(SIZE_STATE);

% === INPUT STRUCT ===
u.accel = [1.456126946168524; 2.400841406666400; 0.425659015881646];
u.cmd = 4.217612826262750;

% === TIME STEP ===
dt = 0.915735525189067;

% === PROCESS NOISE MATRIX Q ===
Q_diag = [1e-9*ones(1,4), 1e0*ones(1,3), 1e-3*ones(1,3), 1e-2, 1, 0];
Q = diag(Q_diag);

% === CALL PREDICTION ===
[x_out, P_out] = ekf_predict(@model_dynamics, @model_dynamics_jacobian, x, P, u, Q, dt);

% === PRINT C-STYLE OUTPUTS ===

% STATE
fprintf('// Predicted State (x_expected)\n');
fprintf('double x_expected[SIZE_STATE] = {\n');
for i = 1:SIZE_STATE
    if i < SIZE_STATE
        fprintf('    %.15g,\n', x_out(i));
    else
        fprintf('    %.15g\n', x_out(i));
    end
end
fprintf('};\n\n');

% COVARIANCE MATRIX FLATTENED
fprintf('// Predicted Covariance (P_expected)\n');
fprintf('double P_expected[SIZE_STATE * SIZE_STATE] = {\n');
for i = 1:SIZE_STATE
    for j = 1:SIZE_STATE
        idx = (i - 1) * SIZE_STATE + j;
        if idx < SIZE_STATE^2
            fprintf('    %.15g,\n', P_out(i, j));
        else
            fprintf('    %.15g\n', P_out(i, j));
        end
    end
end
fprintf('};\n');
 */
// clang-format on
// TEST_F(EstimatorEKFTest, EKFPredictNominalCheckWithNoneAllZerosP) {
//     // Arrange
//     x_state_t state = {
//         .array = {
//             0.814723686393179,
//             0.905791937075619,
//             0.126986816293506,
//             0.913375856139019,
//             0.632359246225410,
//             0.097540404999410,
//             0.278498218867048,
//             0.546881519204984,
//             0.957506835434298,
//             0.964888535199277,
//             0.157613081677548,
//             0.970592781760616,
//             0.957166948242946
//         }
//     };
//     double P_flat[SIZE_STATE * SIZE_STATE] = {
//         0.81472368639318, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.90579193707562,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.12698681629351, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.91337585613902, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.63235924622541, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.09754040499941, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.27849821886705,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.54688151920498, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.95750683543430, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.96488853519928, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.15761308167755, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.97059278176062,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.95716694824295
//     };
//     const u_dynamics_t input = {
//         .cmd = 4.217612826262750,
//         .acceleration = {.array = {1.456126946168524, 2.400841406666400, 0.425659015881646}}
//     };
//     double dt = 0.915735525189067;

//     // set up Q like ekf_algorithm would
//     static double Q_diag[SIZE_STATE] = {
//         1e-9, 1e-9, 1e-9, 1e-9, 1e0, 1e0, 1e0, 1e-3, 1e-3, 1e-3, 1e-2, 1, 0
//     };
//     double Q_arr[SIZE_STATE * SIZE_STATE] = {0};
//     arm_matrix_instance_f64 Q = {.numRows = SIZE_STATE, .numCols = SIZE_STATE, .pData = Q_arr};
//     math_init_matrix_diag(&Q, (uint16_t)SIZE_STATE, Q_diag);

//     x_state_t expected_state = {
//         .array = {
//             0.268274165208879,
//             0.696419511023482,
//             0.194712315844409,
//             0.636487196262266,
//             0.643134076016596,
//             0.006279518794539,
//             0.471014707988784,
//             -0.400684442488099,
//             8.416935880119659,
//             -6.314095921040007,
//             0.525564693616072,
//             1.457215728968408,
//             60.671289317422811
//         }
//     };

//     double expected_P_flat[169] = {
//         0.97335658135130,   -0.06567910390700,  0.00323946322590,   -0.03573628443570,
//         -0.16578046094900,  -0.00407823086160,  -0.08940817458020,  -6.20764780018850,
//         8.19997396823400,   2.74637204206120,   0.12583276427580,   0.00000000000000,
//         0.00000000000000,   -0.06567910390700,  1.02338063439350,   -0.06772373934860,
//         0.01451882784960,   0.14663033272250,   -0.05993343088070,  0.03984732989900,
//         -12.35427707678840, 0.48662399840100,   -9.65250777468960,  -1.76393422161400,
//         0.00000000000000,   0.00000000000000,   0.00323946322590,   -0.06772373934860,
//         0.29361499196620,   0.20859209126820,   0.18590490309220,   -0.06410098764490,
//         -0.07392352909240,  3.99887350516300,   1.55346437103900,   -2.70725220335860,
//         0.08154024882090,   0.00000000000000,   0.00000000000000,   -0.03573628443570,
//         0.01451882784960,   0.20859209126820,   0.96377758233810,   -0.02338443310920,
//         0.07198551355930,   0.05051248152630,   8.29253671787570,   10.25257726032730,
//         -10.00008021424920, 0.40307732930370,   0.00000000000000,   0.00000000000000,
//         -0.16578046094900,  0.14663033272250,   0.18590490309220,   -0.02338443310920,
//         1.55709714044770,   -0.15132871428870,  0.01772432758650,   0.04528128185340,
//         -0.56664272671390,  0.55641525727030,   0.00302817334340,   0.00880145090770,
//         -0.18656305856190,  -0.00407823086160,  -0.05993343088070,  -0.06410098764490,
//         0.07198551355930,   -0.15132871428870,  1.15126881850090,   0.08818142812630,
//         -0.09316465448670,  0.23454779011470,   -0.22197527179970,  -0.03409427723340,
//         0.00000000000000,   0.00000000000000,   -0.08940817458020,  0.03984732989900,
//         -0.07392352909240,  0.05051248152630,   0.01772432758650,   0.08818142812630,
//         1.23541932055910,   -0.26835069218600,  0.13294521353960,   0.09474102861870,
//         -0.00846569669010,  0.00000000000000,   0.00000000000000,   -6.20764780018850,
//         -12.35427707678840, 3.99887350516300,   8.29253671787570,   0.04528128185340,
//         -0.09316465448670,  -0.26835069218600,  284.09835446664000, 22.25984418277860,
//         8.82338601639780,   24.92220558380130,  0.00000000000000,   0.00000000000000,
//         8.19997396823400,   0.48662399840100,   1.55346437103900,   10.25257726032730,
//         -0.56664272671390,  0.23454779011470,   0.13294521353960,   22.25984418277860,
//         196.13202571783900, -79.28767999308460, 5.19097125479250,   0.00000000000000,
//         0.00000000000000,   2.74637204206120,   -9.65250777468960,  -2.70725220335860,
//         -10.00008021424920, 0.55641525727030,   -0.22197527179970,  0.09474102861870,
//         8.82338601639780,   -79.28767999308460, 223.39131162140300, 15.91653552891990,
//         0.00000000000000,   0.00000000000000,   0.12583276427580,   -1.76393422161400,
//         0.08154024882090,   0.40307732930370,   0.00302817334340,   -0.03409427723340,
//         -0.00846569669010,  24.92220558380130,  5.19097125479250,   15.91653552891990,
//         4.65325468409030,   0.00000000000000,   0.00000000000000,   0.00000000000000,
//         0.00000000000000,   0.00000000000000,   0.00000000000000,   0.00880145090770,
//         0.00000000000000,   0.00000000000000,   0.00000000000000,   0.00000000000000,
//         0.00000000000000,   0.00000000000000,   92.22117924418530,  0.00000000000000,
//         0.00000000000000,   0.00000000000000,   0.00000000000000,   0.00000000000000,
//         -0.18656305856190,  0.00000000000000,   0.00000000000000,   0.00000000000000,
//         0.00000000000000,   0.00000000000000,   0.00000000000000,   0.00000000000000,
//         296.11524043861500
//     };

//     // Act
//     ekf_matrix_predict(&state, P_flat, &input, Q.pData, dt);

//     // Assert
//     double tolerance = 1e-6;

//     // check x
//     for (int i = 0; i < SIZE_STATE; i++) {
//         EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
//     }

//     // check P
//     for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
//         EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
//     }

//     // do it again!

//     // Arrange
//     x_state_t state2 = {
//         .array = {
//             0.814723686393179,
//             0.905791937075619,
//             0.126986816293506,
//             0.913375856139019,
//             0.632359246225410,
//             0.097540404999410,
//             0.278498218867048,
//             0.546881519204984,
//             0.957506835434298,
//             0.964888535199277,
//             0.157613081677548,
//             0.970592781760616,
//             0.957166948242946
//         }
//     };
//     double P_flat2[SIZE_STATE * SIZE_STATE] = {
//         0.81472368639318, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.90579193707562,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.12698681629351, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.91337585613902, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.63235924622541, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.09754040499941, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.27849821886705,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.54688151920498, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.95750683543430, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.96488853519928, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.15761308167755, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.97059278176062,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
//         0.00000000000000, 0.00000000000000, 0.00000000000000, 0.95716694824295
//     };

//     // Act
//     ekf_matrix_predict(&state2, P_flat2, &input, Q.pData, dt);

//     // Assert
//     // check x
//     for (int i = 0; i < SIZE_STATE; i++) {
//         EXPECT_NEAR(state2.array[i], expected_state.array[i], tolerance);
//     }

//     // check P
//     for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
//         EXPECT_NEAR(P_flat2[i], expected_P_flat[i], tolerance);
//     }
// }

// TEST_F(EstimatorEKFTest, EKFCorrectNominalCheck) {
//     // Arrange
//     // Initial state estimate
//     x_state_t state = {
//         .array = {
//             8.834741558736747,
//             1.407644570039071,
//             7.699705252613202,
//             5.802880831830792,
//             3.386449892509485,
//             1.718313257126727,
//             3.854276936814474,
//             4.338198549286707,
//             1.085504519674461,
//             5.305567362255530,
//             2.035689117774082,
//             3.461572119324697,
//             5.246877444729065
//         }
//     };

//     // Covariance matrix

//     double P_flat[SIZE_STATE * SIZE_STATE] = {
//         0.25180612247231, 0.26072799905547, 0.63853075827184, 0.61095865874620, 0.63770909807217,
//         0.78051965273136, 0.47135715371061, 0.76550001662144, 0.20893492242602, 0.83291681907522,
//         0.54471611052676, 0.76350464084881, 0.39345636121527, 0.29044066427698, 0.59435625066433,
//         0.03360383606643, 0.77880224182409, 0.95769393984158, 0.67533206574700, 0.03576273326912,
//         0.18866197679149, 0.70928170271055, 0.25644099222915, 0.64731148029313, 0.62789637961417,
//         0.67143113967403, 0.61709088439322, 0.02251259274023, 0.06880609911805, 0.42345291896274,
//         0.24070703548016, 0.00671531431848, 0.17587441568353, 0.28749817306613, 0.23623057699380,
//         0.61346073681288, 0.54388593399964, 0.77198038555425, 0.74125794345421, 0.26528090981003,
//         0.42525932021414, 0.31959973518050, 0.09082328578744, 0.67612230386375, 0.60217048758180,
//         0.72175803339110, 0.09111346368654, 0.11939624779731, 0.58224916452723, 0.72104662057981,
//         0.93285357027882, 0.52005246739039, 0.82437626668884, 0.31271888682062, 0.53086428069413,
//         0.26647149077907, 0.28906457167448, 0.38677119452099, 0.47348599296532, 0.57620938066301,
//         0.60730394068564, 0.54073933712441, 0.52249530577710, 0.97274085400301, 0.34771267127753,
//         0.98266339972195, 0.16148474431175, 0.65444570775707, 0.15365671759131, 0.67180816541422,
//         0.91599124413143, 0.15272120043823, 0.68336324329465, 0.45013769696590, 0.86994103235801,
//         0.99370462412085, 0.19202834942778, 0.14999725383168, 0.73024879226760, 0.17876618675237,
//         0.40761919704115, 0.28100530253387, 0.69514049955174, 0.00115105712911, 0.34112460704911,
//         0.54659311459032, 0.45872549364887, 0.26477902647563, 0.21867663239963, 0.13887420282916,
//         0.58609206723146, 0.34387700411498, 0.42288568910009, 0.81998122278194, 0.44008513900172,
//         0.06799276847001, 0.46244915924233, 0.60738921376835, 0.42572884187119, 0.66194475190565,
//         0.31807407548106, 0.10579827325023, 0.69626633708300, 0.26214531772781, 0.58406933327845,
//         0.09422933888774, 0.71835894320588, 0.52714274176065, 0.25479015659701, 0.42434903981538,
//         0.19174525546180, 0.64444278143134, 0.77028551480366, 0.11921454105419, 0.10969746452319,
//         0.09382002677487, 0.04445409227824, 0.10776901524374, 0.59852366875674, 0.96864933023109,
//         0.45742436568767, 0.22404003082422, 0.46091636602896, 0.73842683997694, 0.64761763017268,
//         0.35021801344111, 0.93982947034492, 0.06359137097511, 0.52540440385934, 0.75493326723118,
//         0.90630815064973, 0.47092425635833, 0.53133390656567, 0.87537159860419, 0.66783272701372,
//         0.77015972860861, 0.24284959831817, 0.67901675409320, 0.66200959835914, 0.64555187497252,
//         0.40457999585763, 0.53034421839286, 0.24278535782096, 0.87965372448191, 0.69594931330161,
//         0.32514568182056, 0.51805210836110, 0.84439215652721, 0.32247180718678, 0.91742434204938,
//         0.63578671051408, 0.41615858996980, 0.47946322494889, 0.44837291206650, 0.86113981139333,
//         0.44240231300194, 0.81776055937064, 0.69988784992829, 0.10562920332902, 0.94362262454839,
//         0.34446241130104, 0.78473929476074, 0.26906158668602, 0.94517411310940, 0.84192915269131,
//         0.63931696104011, 0.36581617683817, 0.48485333355210, 0.68779608512011
//     };

//     // Input IMU measurements
//     y_imu_t imu = {
//         .array = {
//             0.359228210401861,
//             0.736340074301202,
//             0.394707475278763,
//             0.683415866967978,
//             0.704047430334266,
//             0.442305413383371,
//             0.019577623553319,
//             0.330857880214071,
//             0.424309496833137,
//             0.270270423432065
//         }
//     };

//     // Bias vector for IMU (mapping to y_imu_t)
//     const y_imu_t bias = {
//         .array = {
//             0.591161394286367,
//             2.465163554883929,
//             1.289764228149799,
//             2.663312862769061,
//             1.173548986383490,
//             2.307343162164887,
//             1.190374551040850,
//             2.425542287662036,
//             2.265231297021251,
//             1.132186634505309
//         }
//     };

//     static double R_MTI_arr[SIZE_IMU_MEAS * SIZE_IMU_MEAS] = {};
//     static arm_matrix_instance_f64 R_MTI = {
//         .numRows = SIZE_IMU_MEAS, .numCols = SIZE_IMU_MEAS, .pData = R_MTI_arr
//     };
//     static const double R_MTI_diag[SIZE_IMU_MEAS] = {1e-6, 1e-6, 1e-6, 2e-3, 2e-3, 2e-3, 2e1};
//     math_init_matrix_diag(&R_MTI, (uint16_t)SIZE_IMU_MEAS, R_MTI_diag);

//     // Expected corrected state (xhat) and covariance (Phat)
//     x_state_t expected_state = {
//         .array = {
//             0.72315179450000,
//             -0.15390871663000,
//             -0.38112611298000,
//             -0.55507339611000,
//             -1.97068056688000,
//             -0.63282447747000,
//             -1.89832759151000,
//             7987.27283767854000,
//             11685.89820384050000,
//             6024.97702279811000,
//             11059.94689029680000,
//             -1264.10889620298000,
//             9434.24369029872000
//         }
//     };

//     double expected_P_flat[169] = {
//         -0.16396255074395, 0.03495751908739,  0.08672028408696,  0.12620379782192,
//         -0.00000809067585, 0.00000137398097,  0.00000042183882,  0.26213780497346,
//         0.25427243989969,  -0.00249551696389, 0.11395888110983,  0.46136241123118,
//         0.22930103902575,  0.03503976349687,  -0.00736552405380, -0.01852125856406,
//         -0.02695394709101, 0.00000172314187,  -0.00000029281898, -0.00000008978920,
//         -0.05597027475325, -0.05409126918875, 0.00041995553881,  -0.02430614853491,
//         -0.09834752260402, -0.04893439227848, 0.08680852953652,  -0.01849662495095,
//         -0.04578459916873, -0.06677652497917, 0.00000427720254,  -0.00000072725777,
//         -0.00000022382057, -0.13853815188638, -0.13439591749749, 0.00132149947985,
//         -0.06025664934986, -0.24401708937903, -0.12129174004414, 0.12617133534154,
//         -0.02688377156829, -0.06669150752752, -0.09695540889872, 0.00000622356294,
//         -0.00000105617483, -0.00000032429401, -0.20157530026788, -0.19555885977918,
//         0.00197766069164,  -0.08767210026043, -0.35481112668749, -0.17633260413535,
//         -0.00000079801745, 0.00000017014635,  0.00000042208529,  0.00000061338650,
//         0.00001000015150,  -0.00000000002891, -0.00000000013220, 0.00000073164066,
//         -0.00000127185447, -0.00000096226999, 0.00000015143230,  -0.00000980189315,
//         0.00000414867627,  -0.00000407069203, 0.00000086984403,  0.00000215253040,
//         0.00000312995401,  0.00000000017249,  0.00000999998581,  0.00000000008621,
//         -0.00000097731929, -0.00000723883622, 0.00000403010376,  -0.00000268155339,
//         -0.00000690727279, -0.00001028446033, -0.00000425621897, 0.00000090917233,
//         0.00000224922254,  0.00000327191727,  0.00000000003261,  0.00000000010690,
//         0.00001000001443,  0.00000100836692,  -0.00000613575308, 0.00000654756187,
//         -0.00000054632499, 0.00001296412907,  0.00000534283251,  -0.31393762093437,
//         0.06694747656215,  0.16592362482394,  0.24149896407703,  0.00000668640076,
//         -0.00000277570412, -0.00000059216964, -0.06042528736801, 0.33046190500362,
//         -0.05049781718864, 0.13122185349396,  0.12295369628181,  0.53161351440712,
//         -0.23116725617778, 0.04925183935111,  0.12220419933821,  0.17781541540994,
//         -0.00000680262434, 0.00000211001385,  0.00000304374308,  0.05082471562390,
//         0.69949203746536,  -0.39623303553396, 0.19198707532860,  0.49160274523172,
//         0.36770238895997,  -0.50684171426628, 0.10814115111280,  0.26787280862271,
//         0.38987778014886,  0.00000941370280,  -0.00000338480223, 0.00000178510974,
//         0.19636069192908,  -0.10900239360558, 0.74705968343925,  0.09900308926908,
//         -0.07912511129393, 0.98782317726746,  0.03511171933549,  -0.00751179017128,
//         -0.01857960995752, -0.02700034209335, -0.00000230445073, -0.00000072567838,
//         0.00000081103656,  0.01578972775593,  0.07131787163751,  0.06820519796108,
//         0.18169443987829,  0.21161160903077,  0.14333884189231,  0.29189325106294,
//         -0.06225014711293, -0.15432424736473, -0.22445812571282, 0.00001212093737,
//         -0.00000856739198, 0.00000454853485,  0.06369766910305,  -0.47691728362738,
//         0.06475833563651,  -0.02070844423825, -0.87796954784308, -0.61437512938151,
//         0.29900843489038,  -0.06378446014531, -0.15809766891366, -0.22998858133548,
//         0.00000826627490,  -0.00000709651469, -0.00000739082246, 0.54145397880772,
//         -0.01421572762965, 0.24893095461501,  0.15492082999653,  -0.83138638404697,
//         0.47087460507077
//     };

//     // Act: Run the EKF correction step
//     // y_meas is IMU_1(4:end)
//     ekf_matrix_correct(&state, P_flat, &R_MTI, &imu, &bias);

//     // Assert
//     double tolerance = 1e-6;

//     // Check state (x)
//     for (int i = 0; i < SIZE_STATE; i++) {
//         EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
//     }

//     // Check covariance (P)
//     for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
//         EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
//     }

//     // do it again!

//     // Arrange
//     // Initial state estimate
//     x_state_t state2 = {
//         .array = {
//             8.834741558736747,
//             1.407644570039071,
//             7.699705252613202,
//             5.802880831830792,
//             3.386449892509485,
//             1.718313257126727,
//             3.854276936814474,
//             4.338198549286707,
//             1.085504519674461,
//             5.305567362255530,
//             2.035689117774082,
//             3.461572119324697,
//             5.246877444729065
//         }
//     };

//     // Covariance matrix

//     double P_flat2[SIZE_STATE * SIZE_STATE] = {
//         0.25180612247231, 0.26072799905547, 0.63853075827184, 0.61095865874620, 0.63770909807217,
//         0.78051965273136, 0.47135715371061, 0.76550001662144, 0.20893492242602, 0.83291681907522,
//         0.54471611052676, 0.76350464084881, 0.39345636121527, 0.29044066427698, 0.59435625066433,
//         0.03360383606643, 0.77880224182409, 0.95769393984158, 0.67533206574700, 0.03576273326912,
//         0.18866197679149, 0.70928170271055, 0.25644099222915, 0.64731148029313, 0.62789637961417,
//         0.67143113967403, 0.61709088439322, 0.02251259274023, 0.06880609911805, 0.42345291896274,
//         0.24070703548016, 0.00671531431848, 0.17587441568353, 0.28749817306613, 0.23623057699380,
//         0.61346073681288, 0.54388593399964, 0.77198038555425, 0.74125794345421, 0.26528090981003,
//         0.42525932021414, 0.31959973518050, 0.09082328578744, 0.67612230386375, 0.60217048758180,
//         0.72175803339110, 0.09111346368654, 0.11939624779731, 0.58224916452723, 0.72104662057981,
//         0.93285357027882, 0.52005246739039, 0.82437626668884, 0.31271888682062, 0.53086428069413,
//         0.26647149077907, 0.28906457167448, 0.38677119452099, 0.47348599296532, 0.57620938066301,
//         0.60730394068564, 0.54073933712441, 0.52249530577710, 0.97274085400301, 0.34771267127753,
//         0.98266339972195, 0.16148474431175, 0.65444570775707, 0.15365671759131, 0.67180816541422,
//         0.91599124413143, 0.15272120043823, 0.68336324329465, 0.45013769696590, 0.86994103235801,
//         0.99370462412085, 0.19202834942778, 0.14999725383168, 0.73024879226760, 0.17876618675237,
//         0.40761919704115, 0.28100530253387, 0.69514049955174, 0.00115105712911, 0.34112460704911,
//         0.54659311459032, 0.45872549364887, 0.26477902647563, 0.21867663239963, 0.13887420282916,
//         0.58609206723146, 0.34387700411498, 0.42288568910009, 0.81998122278194, 0.44008513900172,
//         0.06799276847001, 0.46244915924233, 0.60738921376835, 0.42572884187119, 0.66194475190565,
//         0.31807407548106, 0.10579827325023, 0.69626633708300, 0.26214531772781, 0.58406933327845,
//         0.09422933888774, 0.71835894320588, 0.52714274176065, 0.25479015659701, 0.42434903981538,
//         0.19174525546180, 0.64444278143134, 0.77028551480366, 0.11921454105419, 0.10969746452319,
//         0.09382002677487, 0.04445409227824, 0.10776901524374, 0.59852366875674, 0.96864933023109,
//         0.45742436568767, 0.22404003082422, 0.46091636602896, 0.73842683997694, 0.64761763017268,
//         0.35021801344111, 0.93982947034492, 0.06359137097511, 0.52540440385934, 0.75493326723118,
//         0.90630815064973, 0.47092425635833, 0.53133390656567, 0.87537159860419, 0.66783272701372,
//         0.77015972860861, 0.24284959831817, 0.67901675409320, 0.66200959835914, 0.64555187497252,
//         0.40457999585763, 0.53034421839286, 0.24278535782096, 0.87965372448191, 0.69594931330161,
//         0.32514568182056, 0.51805210836110, 0.84439215652721, 0.32247180718678, 0.91742434204938,
//         0.63578671051408, 0.41615858996980, 0.47946322494889, 0.44837291206650, 0.86113981139333,
//         0.44240231300194, 0.81776055937064, 0.69988784992829, 0.10562920332902, 0.94362262454839,
//         0.34446241130104, 0.78473929476074, 0.26906158668602, 0.94517411310940, 0.84192915269131,
//         0.63931696104011, 0.36581617683817, 0.48485333355210, 0.68779608512011
//     };

//     // Input IMU measurements
//     y_imu_t imu2 = {
//         .array = {
//             0.359228210401861,
//             0.736340074301202,
//             0.394707475278763,
//             0.683415866967978,
//             0.704047430334266,
//             0.442305413383371,
//             0.019577623553319,
//             0.330857880214071,
//             0.424309496833137,
//             0.270270423432065
//         }
//     };

//     // Bias vector for IMU (mapping to y_imu_t)
//     const y_imu_t bias2 = {
//         .array = {
//             0.591161394286367,
//             2.465163554883929,
//             1.289764228149799,
//             2.663312862769061,
//             1.173548986383490,
//             2.307343162164887,
//             1.190374551040850,
//             2.425542287662036,
//             2.265231297021251,
//             1.132186634505309
//         }
//     };

//     // Act: Run the EKF correction step
//     // y_meas is IMU_1(4:end)
//     ekf_matrix_correct(&state2, P_flat2, &R_MTI, &imu2, &bias2);

//     // Assert
//     // Check state (x)
//     for (int i = 0; i < SIZE_STATE; i++) {
//         EXPECT_NEAR(state2.array[i], expected_state.array[i], tolerance);
//     }

//     // Check covariance (P)
//     for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
//         EXPECT_NEAR(P_flat2[i], expected_P_flat[i], tolerance);
//     }
// }

TEST_F(EstimatorEKFTest, EKFAlgorithmSelectIMU1) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            2.426878243614206,
            4.001402344444001,
            0.709431693136077,
            2.108806413131375,
            4.578677625945335,
            3.961036647797772,
            4.797462131964515,
            3.278703495782934,
            0.178558392870948,
            4.245646529343886,
            4.669966238787753,
            3.393675774288867,
            3.788700652891667
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.50150522974397,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31864903478599, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 1.11722922016661, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.59435520762892, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        1.46906291404807, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.01848024017227,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 2.85489139433318, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 2.76099611950969, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.15803099304238, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        2.21357428655099, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.80735827919567,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 1.26850684502642
    };

    // Input IMU measurements
    y_imu_t imu_1 = {
        .array = {
            2.711216972515416,
            4.238310136658316,
            2.074393441904026,
            7.598779134258502,
            1.752878606103443,
            2.033296028751589,
            1.536372424330727,
            2.048978680348982,
            3.921288156935092,
            2.799920579853715
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_1 = {
        .array = {
            0.942736984276934,
            0.417744104316662,
            0.983052466469856,
            0.301454948712065,
            0.701098755900926,
            0.666338851584426,
            0.539126465042857,
            0.698105520180308,
            0.666527913402587,
            0.178132454400338
        }
    };

    // Input IMU measurements
    y_imu_t imu_2 = {
        .array = {
            7.387037136825951,
            3.441659130636672,
            1.478530560993089,
            7.239047749439143,
            7.837987026848682,
            3.510959785008826,
            0.888953787524790,
            2.064517567296535,
            3.269758768900417,
            4.759168592068915
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_2 = {
        .array = {
            0.128014399720173,
            0.999080394761361,
            0.171121066356432,
            0.032600820530528,
            0.561199792709660,
            0.881866500451810,
            0.669175304534394,
            0.190433267179954,
            0.368916546063895,
            0.460725937260412
        }
    };

    const double cmd = 0.547870901214845;
    const double encoder = 0.431651170248720; // this is unused
    const double dt = 1.038711463665142;
    const bool is_dead_mti = false;
    const bool is_dead_altimu = true;

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.59916088039000,
            -0.09781738360000,
            0.53902274478000,
            0.58385998277000,
            7.29732556928000,
            1.05179899223000,
            1.36694426368000,
            179.40249594179000,
            17237.20565340850000,
            3297.32706179266000,
            8414.37206877395000,
            -26.67275146262000,
            1196.91622528164000
        }
    };

    double expected_P_flat[169] = {
        0.34827662594240,   -0.05694957998050,  0.31269681101090,  0.33892047432900,
        -0.00000000213990,  -0.00000002869380,  -0.00000003295400, -2.10986820377530,
        1.64444001206930,   2.40462652423990,   0.03956261790830,  0.04737105624480,
        -1.91951834614790,  -0.05694957998050,  0.00973230011020,  -0.05119174418660,
        -0.05548480016420,  0.00000000035000,   0.00000000469230,  0.00000000539320,
        0.34394350831500,   -0.27024804480220,  -0.39323618331720, -0.00647052382180,
        -0.00774759555790,  0.31393962877110,   0.31269681101090,  -0.05119174418660,
        0.28149096271140,   0.30465419060570,   -0.00000000192270, -0.00000002578370,
        -0.00000002960940,  -1.89473287605830,  1.47872179104090,  2.15838331172310,
        0.03554626092340,   0.04256200890920,   -1.72465136787390, 0.33892047432900,
        -0.05548480016420,  0.30465419060570,   0.33061228515780,  -0.00000000208290,
        -0.00000002792630,  -0.00000003207980,  -2.05503422945560, 1.60377326889130,
        2.33896177515550,   0.03850814342080,   0.04610837820990,  -1.86835348208610,
        -0.00000000213990,  0.00000000035000,   -0.00000000192270, -0.00000000208290,
        0.00000100000000,   0.00000000000000,   0.00000000000000,  0.00000001117930,
        0.00000003392410,   -0.00000004260910,  0.00000000002250,  0.00000000187020,
        -0.00000007578320,  -0.00000002869380,  0.00000000469230,  -0.00000002578370,
        -0.00000002792630,  0.00000000000000,   0.00000100000000,  0.00000000000000,
        0.00000016091390,   0.00000061512640,   -0.00000008751000, 0.00000000030530,
        0.00000000212050,   -0.00000008592350,  -0.00000003295400, 0.00000000539320,
        -0.00000002960940,  -0.00000003207980,  0.00000000000000,  0.00000000000000,
        0.00000100000000,   -0.00000058032010,  0.00000033347030,  0.00000038910440,
        -0.00000000021020,  0.00000000176170,   -0.00000007138600, -2.10986820377530,
        0.34394350831500,   -1.89473287605830,  -2.05503422945560, 0.00000001117930,
        0.00000016091390,   -0.00000058032010,  85.05613249418260, -28.97901125767910,
        -73.97576874451220, 0.00355113108500,   -0.24747551390040, 10.02793323204780,
        1.64444001206930,   -0.27024804480220,  1.47872179104090,  1.60377326889130,
        0.00000003392410,   0.00000061512640,   0.00000033347030,  -28.97901125767900,
        58.19964266151710,  -7.86160060464530,  0.28382936792880,  -0.75097419875760,
        30.43015854554890,  2.40462652423990,   -0.39323618331720, 2.15838331172310,
        2.33896177515550,   -0.00000004260910,  -0.00000008751000, 0.00000038910440,
        -73.97576874451220, -7.86160060464520,  98.65422614505430, 0.05384660717890,
        0.94323470395660,   -38.22072933337750, 0.03956261790830,  -0.00647052382180,
        0.03554626092340,   0.03850814342080,   0.00000000002250,  0.00000000030530,
        -0.00000000021020,  0.00355113108500,   0.28382936792880,  0.05384660717890,
        0.13834682524810,   -0.00049797504190,  0.02017840226970,  0.04737105624480,
        -0.00774759555790,  0.04256200890920,   0.04610837820990,  0.00000000187020,
        0.00000000212050,   0.00000000176170,   -0.24747551390040, -0.75097419875760,
        0.94323470395660,   -0.00049797504190,  1.18382552447100,  1.67760504900200,
        -1.91951834614790,  0.31393962877110,   -1.72465136787390, -1.86835348208610,
        -0.00000007578320,  -0.00000008592350,  -0.00000007138600, 10.02793323204780,
        30.43015854554890,  -38.22072933337750, 0.02017840226970,  1.67760504900200,
        174.95441199439300
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_algorithm(
        &state,
        P_flat,
        &imu_1,
        &bias_1,
        &imu_2,
        &bias_2,
        cmd,
        encoder,
        dt,
        is_dead_mti,
        is_dead_altimu
    );

    // Assert
    double tolerance = 1e-6;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
    }
}

TEST_F(EstimatorEKFTest, EKFAlgorithmSelectIMU2) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            2.426878243614206,
            4.001402344444001,
            0.709431693136077,
            2.108806413131375,
            4.578677625945335,
            3.961036647797772,
            4.797462131964515,
            3.278703495782934,
            0.178558392870948,
            4.245646529343886,
            4.669966238787753,
            3.393675774288867,
            3.788700652891667
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.50150522974397,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31864903478599, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 1.11722922016661, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.59435520762892, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        1.46906291404807, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.01848024017227,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 2.85489139433318, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 2.76099611950969, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.15803099304238, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        2.21357428655099, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.80735827919567,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 1.26850684502642
    };

    // Input IMU measurements
    y_imu_t imu_1 = {
        .array = {
            2.711216972515416,
            4.238310136658316,
            2.074393441904026,
            7.598779134258502,
            1.752878606103443,
            2.033296028751589,
            1.536372424330727,
            2.048978680348982,
            3.921288156935092,
            2.799920579853715
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_1 = {
        .array = {
            0.942736984276934,
            0.417744104316662,
            0.983052466469856,
            0.301454948712065,
            0.701098755900926,
            0.666338851584426,
            0.539126465042857,
            0.698105520180308,
            0.666527913402587,
            0.178132454400338
        }
    };

    // Input IMU measurements
    y_imu_t imu_2 = {
        .array = {
            7.387037136825951,
            3.441659130636672,
            1.478530560993089,
            7.239047749439143,
            7.837987026848682,
            3.510959785008826,
            0.888953787524790,
            2.064517567296535,
            3.269758768900417,
            4.759168592068915
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_2 = {
        .array = {
            0.128014399720173,
            0.999080394761361,
            0.171121066356432,
            0.032600820530528,
            0.561199792709660,
            0.881866500451810,
            0.669175304534394,
            0.190433267179954,
            0.368916546063895,
            0.460725937260412
        }
    };

    const double cmd = 0.547870901214845;
    const double encoder = 0.431651170248720; // this is unused
    const double dt = 1.038711463665142;
    const bool is_dead_mti = true;
    const bool is_dead_altimu = false;

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.61497736454500,
            0.39814854016500,
            0.58139664747200,
            0.35391880335700,
            7.20644810747900,
            7.27678435309200,
            2.62908497098600,
            -2773.81921355834000,
            8966.71234499070000,
            4000.48283430206000,
            8423.34795259935000,
            -9.08618917269500,
            484.29270287713200
        }
    };

    double expected_P_flat[169] = {
        0.34095986038640,   0.22030475123880,   0.32181062483710,  0.19575842911480,
        -0.00000000430860,  -0.00000006052200,  -0.00000006057990, -2.43266787402240,
        0.44802360104640,   2.40644875283530,   0.05971150884180,  0.04768943441130,
        -1.93241931944300,  0.22030475123880,   0.14291722816420,  0.20817787123020,
        0.12663522094780,   -0.00000000278490,  -0.00000003912110, -0.00000003914890,
        -1.57373584311250,  0.28888475711770,   1.55445529902900,  0.03859471254470,
        0.03082421185500,   -1.24902514006760,  0.32181062483710,  0.20817787123020,
        0.30449943243510,   0.18498273092240,   -0.00000000406950, -0.00000005717080,
        -0.00000005721790,  -2.29690249809550,  0.42389438665230,  2.27076395960130,
        0.05639844046690,   0.04504342978850,   -1.82520080206030, 0.19575842911480,
        0.12663522094780,   0.18498273092240,   0.11292863483440,  -0.00000000247430,
        -0.00000003475170,  -0.00000003479210,  -1.39849628703710, 0.25908615402440,
        1.38085919721920,   0.03429013414760,   0.02738623865800,  -1.10971533470410,
        -0.00000000430860,  -0.00000000278490,  -0.00000000406950, -0.00000000247430,
        0.00000200000000,   0.00000000000000,   0.00000000000000,  0.00000002763150,
        0.00000008258070,   -0.00000008649080,  0.00000000002830,  0.00000000370890,
        -0.00000015028660,  -0.00000006052200,  -0.00000003912110, -0.00000005717080,
        -0.00000003475170,  0.00000000000000,   0.00000199999990,  0.00000000000000,
        0.00000041215800,   0.00000142418500,   -0.00000021148340, -0.00000000009110,
        0.00000000343280,   -0.00000013909830,  -0.00000006057990, -0.00000003914890,
        -0.00000005721790,  -0.00000003479210,  0.00000000000000,  0.00000000000000,
        0.00000199999990,   -0.00000112158890,  0.00000090104350,  0.00000080020000,
        -0.00000000019380,  0.00000000386770,   -0.00000015672140, -2.43266787402240,
        -1.57373584311250,  -2.29690249809550,  -1.39849628703710, 0.00000002763150,
        0.00000041215800,   -0.00000112158890,  89.84253545500990, -22.12821276320070,
        -76.76644574387760, -0.06756597628990,  -0.30583853353670, 12.39285594665890,
        0.44802360104640,   0.28888475711770,   0.42389438665230,  0.25908615402430,
        0.00000008258070,   0.00000142418500,   0.00000090104350,  -22.12821276320070,
        51.04781935738700,  -16.12649990685390, 0.22142083385650,  -0.91404091649550,
        37.03777047479860,  2.40644875283530,   1.55445529902900,  2.27076395960130,
        1.38085919721920,   -0.00000008649080,  -0.00000021148340, 0.00000080020000,
        -76.76644574387760, -16.12649990685390, 99.20623283347320, 0.09819503633750,
        0.95731908964050,   -38.79144146980950, 0.05971150884180,  0.03859471254470,
        0.05639844046690,   0.03429013414760,   0.00000000002830,  -0.00000000009110,
        -0.00000000019380,  -0.06756597628990,  0.22142083385650,  0.09819503633750,
        0.20774505432600,   -0.00031337653100,  0.01269830247150,  0.04768943441130,
        0.03082421185500,   0.04504342978850,   0.02738623865800,  0.00000000370890,
        0.00000000343280,   0.00000000386770,   -0.30583853353670, -0.91404091649550,
        0.95731908964050,   -0.00031337653100,  1.18417509080390,  1.66344030279650,
        -1.93241931944300,  -1.24902514006760,  -1.82520080206030, -1.10971533470410,
        -0.00000015028660,  -0.00000013909830,  -0.00000015672140, 12.39285594665890,
        37.03777047479860,  -38.79144146980950, 0.01269830247150,  1.66344030279650,
        175.52838041235400
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_algorithm(
        &state,
        P_flat,
        &imu_1,
        &bias_1,
        &imu_2,
        &bias_2,
        cmd,
        encoder,
        dt,
        is_dead_mti,
        is_dead_altimu
    );

    // Assert
    double tolerance = 1e-6;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
    }
}

// clang-format off
/*
clear;

% Define state vector
x = [ ...
    2.426878243614206;
    4.001402344444001;
    0.709431693136077;
    2.108806413131375;
    4.578677625945335;
    3.961036647797772;
    4.797462131964515;
    3.278703495782934;
    0.178558392870948;
    4.245646529343886;
    4.669966238787753;
    3.393675774288867;
    3.788700652891667
];

% Define corrected diagonal covariance matrix P (13x13)
P = diag([ ...
    2.95219117313746;
    0.50150522974397;
    0.31864903478599;
    1.11722922016661;
    0.59435520762892;
    1.46906291404807;
    1.01848024017227;
    2.85489139433318;
    2.76099611950969;
    0.15803099304238;
    2.21357428655099;
    0.80735827919567;
    1.26850684502642
]);

% Correct IMU measurements
IMU_1 = [ ...
    2.711216972515416;
    4.238310136658316;
    2.074393441904026;
    7.598779134258502;
    1.752878606103443;
    2.033296028751589;
    1.536372424330727;
    2.048978680348982;
    3.921288156935092;
    2.799920579853715
];

IMU_2 = [ ...
    7.387037136825951;
    3.441659130636672;
    1.478530560993089;
    7.239047749439143;
    7.837987026848682;
    3.510959785008826;
    0.888953787524790;
    2.064517567296535;
    3.269758768900417;
    4.759168592068915
];

% IMU biases
bias_1 = [ ...
    0.942736984276934;
    0.417744104316662;
    0.983052466469856;
    0.301454948712065;
    0.701098755900926;
    0.666338851584426;
    0.539126465042857;
    0.698105520180308;
    0.666527913402587;
    0.178132454400338
];

bias_2 = [ ...
    0.128014399720173;
    0.999080394761361;
    0.171121066356432;
    0.032600820530528;
    0.561199792709660;
    0.881866500451810;
    0.669175304534394;
    0.190433267179954;
    0.368916546063895;
    0.460725937260412
];

% Bias struct
b.bias_1 = bias_1;
b.bias_2 = bias_2;

% Inputs
cmd = 0.547870901214845;
encoder = 0.431651170248720;
T = 1.038711463665142;

% Global IMU selector
global IMU_select;
IMU_select = [1 1];

% Call EKF (make sure ekf_algorithm.m is available)
[xhat, Phat] = ekf_algorithm(x, P, b, 0, T, IMU_1, IMU_2, cmd, encoder, []);

% Display results
disp('Corrected state x:');
disp(xhat);

disp('Corrected covariance P:');
disp(Phat);

% Assuming xhat and Phat are already computed

% Convert xhat (13x1 vector) into C array format, row-major order
xhat_c = reshape(xhat, 1, []);  % Flatten the vector to a row vector

% Display xhat in C array format
disp('xhat in C array format (row-major):');
fprintf('float xhat[] = { ');
fprintf('%f, ', xhat_c(1:end-1));  % Print all except the last element
fprintf('%f }; \n', xhat_c(end));  % Print the last element

% Convert Phat (13x13 matrix) into C array format, row-major order
Phat_c = reshape(Phat, 1, []);  % Flatten the matrix to a row vector

% Display Phat in C array format
disp('Phat in C array format (row-major):');
fprintf('float Phat[] = { ');
fprintf('%f, ', Phat_c(1:end-1));  % Print all except the last element
fprintf('%f }; \n', Phat_c(end));  % Print the last element

*/
// clang-format on
TEST_F(EstimatorEKFTest, EKFAlgorithmSelectBoth) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            2.426878243614206,
            4.001402344444001,
            0.709431693136077,
            2.108806413131375,
            4.578677625945335,
            3.961036647797772,
            4.797462131964515,
            3.278703495782934,
            0.178558392870948,
            4.245646529343886,
            4.669966238787753,
            3.393675774288867,
            3.788700652891667
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.50150522974397,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31864903478599, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 1.11722922016661, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.59435520762892, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        1.46906291404807, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.01848024017227,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 2.85489139433318, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 2.76099611950969, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.15803099304238, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        2.21357428655099, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.80735827919567,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 1.26850684502642
    };

    // Input IMU measurements
    y_imu_t imu_1 = {
        .array = {
            2.711216972515416,
            4.238310136658316,
            2.074393441904026,
            7.598779134258502,
            1.752878606103443,
            2.033296028751589,
            1.536372424330727,
            2.048978680348982,
            3.921288156935092,
            2.799920579853715
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_1 = {
        .array = {
            0.942736984276934,
            0.417744104316662,
            0.983052466469856,
            0.301454948712065,
            0.701098755900926,
            0.666338851584426,
            0.539126465042857,
            0.698105520180308,
            0.666527913402587,
            0.178132454400338
        }
    };

    // Input IMU measurements
    y_imu_t imu_2 = {
        .array = {
            7.387037136825951,
            3.441659130636672,
            1.478530560993089,
            7.239047749439143,
            7.837987026848682,
            3.510959785008826,
            0.888953787524790,
            2.064517567296535,
            3.269758768900417,
            4.759168592068915
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_2 = {
        .array = {
            0.128014399720173,
            0.999080394761361,
            0.171121066356432,
            0.032600820530528,
            0.561199792709660,
            0.881866500451810,
            0.669175304534394,
            0.190433267179954,
            0.368916546063895,
            0.460725937260412
        }
    };

    const double cmd = 0.547870901214845;
    const double encoder = 0.431651170248720; // this is unused
    const double dt = 1.038711463665142;
    const bool is_dead_mti = false;
    const bool is_dead_altimu = false;

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.68587769827000,
            0.44292676573000,
            0.51380454082000,
            0.26342467054000,
            7.26703356092000,
            3.12680673055000,
            1.78767218631000,
            1378.79712259473000,
            17716.47322737630000,
            2218.11071963237000,
            9076.12024351285000,
            -55.61994856876000,
            2369.88301807757000
        }

    };

    double expected_P_flat[169] = {
        0.00029600961150,   -0.00003803865650,  0.00009077815230,  0.00001962471420,
        -0.00000000000100,  -0.00000000001430,  -0.00000000001520, -0.00117431851180,
        0.00018301615440,   0.00242245269750,   0.00002596866750,  0.00003458578140,
        -0.00140144736460,  -0.00003803865650,  0.00023756359880,  -0.00004311074910,
        0.00005102238290,   0.00000000000020,   0.00000000000260,  0.00000000000360,
        -0.00068597007950,  -0.00043729066010,  -0.00044580608300, -0.00000443522700,
        -0.00000591327200,  0.00023961116630,   0.00009077815230,  -0.00004311074910,
        0.00029353648950,   0.00000053715960,   -0.00000000000070, -0.00000000001050,
        -0.00000000001000,  -0.00010361098480,  0.00040005115270,  0.00070700432270,
        0.00001693161440,   0.00002256634920,   -0.00091440902180, 0.00001962471420,
        0.00005102238290,   0.00000053715960,   0.00039088012910,  0.00000000000000,
        0.00000000000200,   -0.00000000000070,  -0.00132901939910, 0.00132151305020,
        -0.00035117752650,  -0.00000059109960,  -0.00000084078310, 0.00003406929810,
        -0.00000000000100,  0.00000000000020,   -0.00000000000070, 0.00000000000000,
        0.00000066666670,   0.00000000000000,   0.00000000000000,  -0.00000000121750,
        0.00000002934100,   -0.00000001853720,  0.00000000015980,  0.00000000144150,
        -0.00000005841140,  -0.00000000001430,  0.00000000000260,  -0.00000000001050,
        0.00000000000200,   0.00000000000000,   0.00000066666670,  0.00000000000000,
        -0.00000000898340,  0.00000050025610,   0.00000007398790,  0.00000000214460,
        0.00000000402430,   -0.00000016306910,  -0.00000000001520, 0.00000000000360,
        -0.00000000001000,  -0.00000000000070,  0.00000000000000,  0.00000000000000,
        0.00000066666670,   -0.00000052033840,  0.00000032591190,  0.00000041132630,
        0.00000000212560,   0.00000000417130,   -0.00000016902400, -0.00117431851180,
        -0.00068597007950,  -0.00010361098480,  -0.00132901939910, -0.00000000121750,
        -0.00000000898340,  -0.00000052033840,  72.23428872869280, -19.03242351085830,
        -59.38033705481480, 0.21950819687270,   0.04042612213900,  -1.63810329050660,
        0.00018301615440,   -0.00043729066010,  0.00040005115270,  0.00132151305020,
        0.00000002934100,   0.00000050025610,   0.00000032591190,  -19.03242351085820,
        50.41586001207180,  -19.19556814261000, 0.08756584013300,  -0.97427705917230,
        39.47859384111320,  0.00242245269750,   -0.00044580608300, 0.00070700432270,
        -0.00035117752650,  -0.00000001853720,  0.00000007398790,  0.00000041132630,
        -59.38033705481470, -19.19556814260980, 82.03595506398530, -0.19777284159740,
        0.61553543715670,   -24.94205656342400, 0.00002596866750,  -0.00000443522700,
        0.00001693161440,   -0.00000059109960,  0.00000000015980,  0.00000000214460,
        0.00000000212560,   0.21950819687270,   0.08756584013300,  -0.19777284159740,
        0.12084986341720,   -0.00530543072500,  0.21498088533830,  0.00003458578140,
        -0.00000591327200,  0.00002256634920,   -0.00000084078310, 0.00000000144150,
        0.00000000402430,   0.00000000417130,   0.04042612213900,  -0.97427705917230,
        0.61553543715670,   -0.00530543072500,  1.17736054048020,  1.93957208882660,
        -0.00140144736460,  0.00023961116630,   -0.00091440902170, 0.00003406929810,
        -0.00000005841140,  -0.00000016306910,  -0.00000016902400, -1.63810329050660,
        39.47859384111310,  -24.94205656342400, 0.21498088533830,  1.93957208882660,
        164.33926893254100
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_algorithm(
        &state,
        P_flat,
        &imu_1,
        &bias_1,
        &imu_2,
        &bias_2,
        cmd,
        encoder,
        dt,
        is_dead_mti,
        is_dead_altimu
    );

    // Assert
    double tolerance = 1e-6;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
    }
}
