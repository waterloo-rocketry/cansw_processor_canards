#include "fff.h"
#include <gtest/gtest.h>

extern "C" {
#include "application/estimator/ekf.h"
#include "application/estimator/estimator_types.h"
#include "arm_math.h"
#include "common/math/math-algebra3d.h"
#include "third_party/rocketlib/include/common.h"

DEFINE_FFF_GLOBALS;
FAKE_VALUE_FUNC(w_status_t, log_text, const char *, const char *);
}

class EstimatorEKFTest : public ::testing::Test {
protected:
    void SetUp() override {
        ekf_init();
        FFF_RESET_HISTORY();
    }

    void TearDown() override {}
};

// clang-format off
/**
clear ekf_predict;
T = 0.915735525189067;
x = [
    0.814723686393179;
    0.905791937075619;
    0.126986816293506;
    0.913375856139019;
    0.632359246225410;
    0.097540404999410;
    0.278498218867048;
    0.546881519204984;
    0.957506835434298;
    0.964888535199277;
    0.157613081677548;
    0.970592781760616;
    0.957166948242946
];
P = zeros(13, 13);  % Initial covariance
Q = diag([[1,1,1,1]*1e-10, [0.001, 0.01, 0.01], [1,1,1]*1e-6, 0.001,  0.3,  0.1]);
u.cmd = 4.217612826262750;
u.accel = [1.456126946168524; 2.400841406666400; 0.425659015881646];

[xhat, Phat] = ekf_predict(@model_dynamics, @model_dynamics_jacobian, x, P, u, Q, T);

x_c = reshape(xhat, 1, []);
fprintf('{ ');
fprintf('%.9f, ', x_c(1:end-1));
fprintf('%.9f };\n\n', x_c(end));
P_c = reshape(Phat.', 1, []);  % Transpose for row-major
fprintf('{ ');
fprintf('%.9f, ', P_c(1:end-1));
fprintf('%.9f };\n', P_c(end));

 */
// clang-format on
TEST_F(EstimatorEKFTest, EKFPredictNominalCheckWithAllZerosP) {
    // Arrange
    x_state_t state = {
        .array = {
            0.814723686393179,
            0.905791937075619,
            0.126986816293506,
            0.913375856139019,
            0.632359246225410,
            0.097540404999410,
            0.278498218867048,
            0.546881519204984,
            0.957506835434298,
            0.964888535199277,
            0.157613081677548,
            0.970592781760616,
            0.957166948242946
        }
    };
    double P_flat[SIZE_STATE * SIZE_STATE] = {0};
    const u_dynamics_t input = {
        .cmd = 4.217612826262750,
        .acceleration = {.array = {1.456126946168524, 2.400841406666400, 0.425659015881646}}
    };
    double dt = 0.915735525189067;

    // set up Q like ekf_algorithm would
    static const double Q_diag[SIZE_STATE] = {
        1e-10, 1e-10, 1e-10, 1e-10, 0.001, 0.01, 0.01, 1e-6, 1e-6, 1e-6, 0.001, 0.3, 0.1
    };
    double Q_arr[SIZE_STATE * SIZE_STATE] = {0};
    arm_matrix_instance_f64 Q = {.numRows = SIZE_STATE, .numCols = SIZE_STATE, .pData = Q_arr};
    math_init_matrix_diag(&Q, (uint16_t)SIZE_STATE, Q_diag);

    x_state_t expected_state = {
        .array = {
            0.268274165,
            0.696419511,
            0.194712316,
            0.636487196,
            0.633851629,
            0.253887986,
            0.225958358,
            -0.400684442,
            8.416935880,
            -6.314095921,
            0.525564694,
            1.016603615,
            100.480704230
        }
    };

    // Predicted Covariance (P_expected)
    double P_expected[SIZE_STATE * SIZE_STATE] = {
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.001000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.010000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.010000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000001000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000001000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000001000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.001000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.300000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000, 0.000000000,
        0.100000000
    };

    // Act
    ekf_matrix_predict(&state, P_flat, &input, Q.pData, dt);

    // Assert
    double tolerance = 1e-6;

    // check x
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // check P
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], P_expected[i], tolerance);
    }
}

// clang-format off
/**
 clear ekf_predict;
T = 0.915735525189067;
x = [
    0.814723686393179;
    0.905791937075619;
    0.126986816293506;
    0.913375856139019;
    0.632359246225410;
    0.097540404999410;
    0.278498218867048;
    0.546881519204984;
    0.957506835434298;
    0.964888535199277;
    0.157613081677548;
    0.970592781760616;
    0.957166948242946
];
P = diag(x);
Q = diag([[1,1,1,1]*1e-10, [0.001, 0.01, 0.01], [1,1,1]*1e-6, 0.001,  0.3,  0.1]);
u.cmd = 4.217612826262750;
u.accel = [1.456126946168524; 2.400841406666400; 0.425659015881646];

[xhat, Phat] = ekf_predict(@model_dynamics, @model_dynamics_jacobian, x, P, u, Q, T);

x_c = reshape(xhat, 1, []);
fprintf('{ ');
fprintf('%.9f, ', x_c(1:end-1));
fprintf('%.9f };\n\n', x_c(end));

P_c = reshape(Phat.', 1, []);  % Transpose for row-major C-style output
fprintf('{ ');
fprintf('%.9f, ', P_c(1:end-1));
fprintf('%.9f };\n', P_c(end));
*/
// clang-format on
TEST_F(EstimatorEKFTest, EKFPredictNominalCheckWithNoneAllZerosP) {
    // Arrange
    x_state_t state = {
        .array = {
            0.814723686393179,
            0.905791937075619,
            0.126986816293506,
            0.913375856139019,
            0.632359246225410,
            0.097540404999410,
            0.278498218867048,
            0.546881519204984,
            0.957506835434298,
            0.964888535199277,
            0.157613081677548,
            0.970592781760616,
            0.957166948242946
        }
    };
    double P_flat[SIZE_STATE * SIZE_STATE] = {
        0.81472368639318, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.90579193707562,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.12698681629351, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.91337585613902, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.63235924622541, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.09754040499941, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.27849821886705,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.54688151920498, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.95750683543430, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.96488853519928, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.15761308167755, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.97059278176062,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.95716694824295
    };
    const u_dynamics_t input = {
        .cmd = 4.217612826262750,
        .acceleration = {.array = {1.456126946168524, 2.400841406666400, 0.425659015881646}}
    };
    double dt = 0.915735525189067;

    // set up Q like ekf_algorithm would
    static double Q_diag[SIZE_STATE] = {
        1e-10, 1e-10, 1e-10, 1e-10, 0.001, 0.01, 0.01, 1e-6, 1e-6, 1e-6, 0.001, 0.3, 0.1
    };
    double Q_arr[SIZE_STATE * SIZE_STATE] = {0};
    arm_matrix_instance_f64 Q = {.numRows = SIZE_STATE, .numCols = SIZE_STATE, .pData = Q_arr};
    math_init_matrix_diag(&Q, (uint16_t)SIZE_STATE, Q_diag);

    const x_state_t expected_state = {
        .array = {
            0.268274165,
            0.696419511,
            0.194712316,
            0.636487196,
            0.633851629,
            0.253887986,
            0.225958358,
            -0.400684442,
            8.416935880,
            -6.314095921,
            0.525564694,
            1.016603615,
            100.480704230
        }
    };

    const double expected_P_flat[SIZE_STATE * SIZE_STATE] = {
        0.973356572,   -0.065679104, 0.003239463,   -0.035736284, -0.802446283,  -0.047075631,
        -0.060914882,  -6.334762384, 7.973001327,   3.043654538,  0.125832764,   0.000000000,
        0.000000000,   -0.065679104, 1.023380625,   -0.067723739, 0.014518828,   0.988914905,
        0.012618778,   -0.003335825, -12.288513924, 0.748834135,  -9.949985297,  -1.763934222,
        0.000000000,   0.000000000,  0.003239463,   -0.067723739, 0.293614983,   0.208592091,
        -1.207036044,  0.068361125,  -0.090924833,  3.824226816,  1.935038706,   -2.986920764,
        0.081540249,   0.000000000,  0.000000000,   -0.035736284, 0.014518828,   0.208592091,
        0.963777573,   -0.097113897, 0.019972810,   0.070284993,  8.364985924,   10.141951663,
        -9.931363848,  0.403077329,  0.000000000,   0.000000000,  -0.802446283,  0.988914905,
        -1.207036044,  -0.097113897, 99.824829490,  -2.529988213, 2.605966273,   4.712971364,
        -0.779904709,  -1.894438264, 0.000419421,   0.001465050,  -0.044061888,  -0.047075631,
        0.012618778,   0.068361125,  0.019972810,   -2.529988213, 0.148680217,   -0.015380410,
        -0.088380232,  0.142933298,  -0.093612017,  -0.000947063, 0.000000000,   0.000000000,
        -0.060914882,  -0.003335825, -0.090924833,  0.070284993,  2.605966273,   -0.015380410,
        0.293548831,   0.244934895,  -0.188663780,  0.049318304,  -0.000235158,  0.000000000,
        0.000000000,   -6.334762384, -12.288513924, 3.824226816,  8.364985924,   4.712971364,
        -0.088380232,  0.244934895,  284.080040756, 22.469288317, 8.748712228,   24.555304383,
        0.000000000,   0.000000000,  7.973001327,   0.748834135,  1.935038706,   10.141951663,
        -0.779904709,  0.142933298,  -0.188663780,  22.469288317, 196.113712007, -79.279130895,
        5.937593636,   0.000000000,  0.000000000,   3.043654538,  -9.949985297,  -2.986920764,
        -9.931363848,  -1.894438264, -0.093612017,  0.049318304,  8.748712228,   -79.279130895,
        223.372997911, 16.488128116, 0.000000000,   0.000000000,  0.125832764,   -1.763934222,
        0.081540249,   0.403077329,  0.000419421,   -0.000947063, -0.000235158,  24.555304383,
        5.937593636,   16.488128116, 4.645097329,   0.000000000,  0.000000000,   0.000000000,
        0.000000000,   0.000000000,  0.000000000,   0.001465050,  0.000000000,   0.000000000,
        0.000000000,   0.000000000,  0.000000000,   0.000000000,  1.235366095,   0.000000000,
        0.000000000,   0.000000000,  0.000000000,   0.000000000,  -0.044061888,  0.000000000,
        0.000000000,   0.000000000,  0.000000000,   0.000000000,  0.000000000,   0.000000000,
        834.459685524
    };

    // Act
    ekf_matrix_predict(&state, P_flat, &input, Q.pData, dt);

    // Assert
    double tolerance = 1e-6;

    // check x
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // check P
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        double P_tolerance = expected_P_flat[i] > 90 ? expected_P_flat[i] * tolerance : tolerance;
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], P_tolerance);
    }

    // do it again!

    // Arrange
    x_state_t state2 = {
        .array = {
            0.814723686393179,
            0.905791937075619,
            0.126986816293506,
            0.913375856139019,
            0.632359246225410,
            0.097540404999410,
            0.278498218867048,
            0.546881519204984,
            0.957506835434298,
            0.964888535199277,
            0.157613081677548,
            0.970592781760616,
            0.957166948242946
        }
    };
    double P_flat2[SIZE_STATE * SIZE_STATE] = {
        0.81472368639318, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.90579193707562,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.12698681629351, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.91337585613902, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.63235924622541, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.09754040499941, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.27849821886705,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.54688151920498, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.95750683543430, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.96488853519928, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.15761308167755, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.97059278176062,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.95716694824295
    };

    // Act
    ekf_matrix_predict(&state2, P_flat2, &input, Q.pData, dt);

    // Assert
    // check x
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state2.array[i], expected_state.array[i], tolerance);
    }

    // check P
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        double P_tolerance = expected_P_flat[i] > 90 ? expected_P_flat[i] * tolerance : tolerance;
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], P_tolerance);
    }
}

/**

// clang-format off
clear ekf_predict;
T = 0.915735525189067;
x = [
    0.814723686393179;
    0.905791937075619;
    0.126986816293506;
    0.913375856139019;
    0.632359246225410;
    0.097540404999410;
    0.278498218867048;
    0.546881519204984;
    0.957506835434298;
    0.964888535199277;
    0.157613081677548;
    0.970592781760616;
    0.957166948242946
];
P = reshape([
    0.25180612247231, 0.26072799905547, 0.63853075827184, 0.61095865874620, 0.63770909807217, ...
    0.78051965273136, 0.47135715371061, 0.76550001662144, 0.20893492242602, 0.83291681907522, ...
    0.54471611052676, 0.76350464084881, 0.39345636121527, 0.29044066427698, 0.59435625066433, ...
    0.03360383606643, 0.77880224182409, 0.95769393984158, 0.67533206574700, 0.03576273326912, ...
    0.18866197679149, 0.70928170271055, 0.25644099222915, 0.64731148029313, 0.62789637961417, ...
    0.67143113967403, 0.61709088439322, 0.02251259274023, 0.06880609911805, 0.42345291896274, ...
    0.24070703548016, 0.00671531431848, 0.17587441568353, 0.28749817306613, 0.23623057699380, ...
    0.61346073681288, 0.54388593399964, 0.77198038555425, 0.74125794345421, 0.26528090981003, ...
    0.42525932021414, 0.31959973518050, 0.09082328578744, 0.67612230386375, 0.60217048758180, ...
    0.72175803339110, 0.09111346368654, 0.11939624779731, 0.58224916452723, 0.72104662057981, ...
    0.93285357027882, 0.52005246739039, 0.82437626668884, 0.31271888682062, 0.53086428069413, ...
    0.26647149077907, 0.28906457167448, 0.38677119452099, 0.47348599296532, 0.57620938066301, ...
    0.60730394068564, 0.54073933712441, 0.52249530577710, 0.97274085400301, 0.34771267127753, ...
    0.98266339972195, 0.16148474431175, 0.65444570775707, 0.15365671759131, 0.67180816541422, ...
    0.91599124413143, 0.15272120043823, 0.68336324329465, 0.45013769696590, 0.86994103235801, ...
    0.99370462412085, 0.19202834942778, 0.14999725383168, 0.73024879226760, 0.17876618675237, ...
    0.40761919704115, 0.28100530253387, 0.69514049955174, 0.00115105712911, 0.34112460704911, ...
    0.54659311459032, 0.45872549364887, 0.26477902647563, 0.21867663239963, 0.13887420282916, ...
    0.58609206723146, 0.34387700411498, 0.42288568910009, 0.81998122278194, 0.44008513900172, ...
    0.06799276847001, 0.46244915924233, 0.60738921376835, 0.42572884187119, 0.66194475190565, ...
    0.31807407548106, 0.10579827325023, 0.69626633708300, 0.26214531772781, 0.58406933327845, ...
    0.09422933888774, 0.71835894320588, 0.52714274176065, 0.25479015659701, 0.42434903981538, ...
    0.19174525546180, 0.64444278143134, 0.77028551480366, 0.11921454105419, 0.10969746452319, ...
    0.09382002677487, 0.04445409227824, 0.10776901524374, 0.59852366875674, 0.96864933023109, ...
    0.45742436568767, 0.22404003082422, 0.46091636602896, 0.73842683997694, 0.64761763017268, ...
    0.35021801344111, 0.93982947034492, 0.06359137097511, 0.52540440385934, 0.75493326723118, ...
    0.90630815064973, 0.47092425635833, 0.53133390656567, 0.87537159860419, 0.66783272701372, ...
    0.77015972860861, 0.24284959831817, 0.67901675409320, 0.66200959835914, 0.64555187497252, ...
    0.40457999585763, 0.53034421839286, 0.24278535782096, 0.87965372448191, 0.69594931330161, ...
    0.32514568182056, 0.51805210836110, 0.84439215652721, 0.32247180718678, 0.91742434204938, ...
    0.63578671051408, 0.41615858996980, 0.47946322494889, 0.44837291206650, 0.86113981139333, ...
    0.44240231300194, 0.81776055937064, 0.69988784992829, 0.10562920332902, 0.94362262454839, ...
    0.34446241130104, 0.78473929476074, 0.26906158668602, 0.94517411310940, 0.84192915269131, ...
    0.63931696104011, 0.36581617683817, 0.48485333355210, 0.68779608512011
], [13, 13])';  % Transpose to convert from row-major (C-style) to column-major (MATLAB)
Q = diag([[1,1,1,1]*1e-10, [0.001, 0.01, 0.01], [1,1,1]*1e-6, 0.001,  0.3,  0.1]);
u.cmd = 4.217612826262750;
u.accel = [1.456126946168524; 2.400841406666400; 0.425659015881646];
IMU_1 = [ ...
      0.359228210401861;
            0.736340074301202;
            0.394707475278763;
            0.683415866967978;
            0.704047430334266;
            0.442305413383371;
            0.019577623553319;
            0.330857880214071;
            0.424309496833137;
            0.270270423432065
];
IMU_2 = [ ...
     8.834741558736747;
     1.407644570039071;
            7.699705252613202;
            5.802880831830792;
            3.386449892509485;
            1.718313257126727;
            3.854276936814474;
            4.338198549286707;
            1.085504519674461;
            5.305567362255530;
            2.035689117774082;
            3.461572119324697;
            5.246877444729065
];
bias_1 = [ ...
            0.591161394286367;
            2.465163554883929;
            1.289764228149799;
            2.663312862769061;
            1.173548986383490;
            2.307343162164887;
            1.190374551040850;
            2.425542287662036;
            2.265231297021251;
            1.132186634505309
];
bias_2 = [ ...
            0.591161394286367;
            2.465163554883929;
            1.289764228149799;
            2.663312862769061;
            1.173548986383490;
            2.307343162164887;
            1.190374551040850;
            2.425542287662036;
            2.265231297021251;
            1.132186634505309
];
b.bias_1 = bias_1;
b.bias_2 = bias_2;
        R = diag([[1, 1, 1]*1e-6, [1, 1, 1]*0.01, 1]);

[xhat, Phat] = ekf_correct(@model_meas_imu, @model_meas_imu_jacobian, x, P, IMU_1(4:end), ...
b.bias_1,R);

x_c = reshape(xhat, 1, []);
fprintf('{ ');
fprintf('%.9f, ', x_c(1:end-1));
fprintf('%.9f };\n\n', x_c(end));

P_c = reshape(Phat.', 1, []);  % Transpose for row-major C-style output
fprintf('{ ');
fprintf('%.9f, ', P_c(1:end-1));
fprintf('%.9f };\n', P_c(end));
// clang-format on
 */
TEST_F(EstimatorEKFTest, EKFCorrectIMUNominalCheck) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            0.814723686393179,
            0.905791937075619,
            0.126986816293506,
            0.913375856139019,
            0.632359246225410,
            0.097540404999410,
            0.278498218867048,
            0.546881519204984,
            0.957506835434298,
            0.964888535199277,
            0.157613081677548,
            0.970592781760616,
            0.957166948242946
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        0.25180612247231, 0.26072799905547, 0.63853075827184, 0.61095865874620, 0.63770909807217,
        0.78051965273136, 0.47135715371061, 0.76550001662144, 0.20893492242602, 0.83291681907522,
        0.54471611052676, 0.76350464084881, 0.39345636121527, 0.29044066427698, 0.59435625066433,
        0.03360383606643, 0.77880224182409, 0.95769393984158, 0.67533206574700, 0.03576273326912,
        0.18866197679149, 0.70928170271055, 0.25644099222915, 0.64731148029313, 0.62789637961417,
        0.67143113967403, 0.61709088439322, 0.02251259274023, 0.06880609911805, 0.42345291896274,
        0.24070703548016, 0.00671531431848, 0.17587441568353, 0.28749817306613, 0.23623057699380,
        0.61346073681288, 0.54388593399964, 0.77198038555425, 0.74125794345421, 0.26528090981003,
        0.42525932021414, 0.31959973518050, 0.09082328578744, 0.67612230386375, 0.60217048758180,
        0.72175803339110, 0.09111346368654, 0.11939624779731, 0.58224916452723, 0.72104662057981,
        0.93285357027882, 0.52005246739039, 0.82437626668884, 0.31271888682062, 0.53086428069413,
        0.26647149077907, 0.28906457167448, 0.38677119452099, 0.47348599296532, 0.57620938066301,
        0.60730394068564, 0.54073933712441, 0.52249530577710, 0.97274085400301, 0.34771267127753,
        0.98266339972195, 0.16148474431175, 0.65444570775707, 0.15365671759131, 0.67180816541422,
        0.91599124413143, 0.15272120043823, 0.68336324329465, 0.45013769696590, 0.86994103235801,
        0.99370462412085, 0.19202834942778, 0.14999725383168, 0.73024879226760, 0.17876618675237,
        0.40761919704115, 0.28100530253387, 0.69514049955174, 0.00115105712911, 0.34112460704911,
        0.54659311459032, 0.45872549364887, 0.26477902647563, 0.21867663239963, 0.13887420282916,
        0.58609206723146, 0.34387700411498, 0.42288568910009, 0.81998122278194, 0.44008513900172,
        0.06799276847001, 0.46244915924233, 0.60738921376835, 0.42572884187119, 0.66194475190565,
        0.31807407548106, 0.10579827325023, 0.69626633708300, 0.26214531772781, 0.58406933327845,
        0.09422933888774, 0.71835894320588, 0.52714274176065, 0.25479015659701, 0.42434903981538,
        0.19174525546180, 0.64444278143134, 0.77028551480366, 0.11921454105419, 0.10969746452319,
        0.09382002677487, 0.04445409227824, 0.10776901524374, 0.59852366875674, 0.96864933023109,
        0.45742436568767, 0.22404003082422, 0.46091636602896, 0.73842683997694, 0.64761763017268,
        0.35021801344111, 0.93982947034492, 0.06359137097511, 0.52540440385934, 0.75493326723118,
        0.90630815064973, 0.47092425635833, 0.53133390656567, 0.87537159860419, 0.66783272701372,
        0.77015972860861, 0.24284959831817, 0.67901675409320, 0.66200959835914, 0.64555187497252,
        0.40457999585763, 0.53034421839286, 0.24278535782096, 0.87965372448191, 0.69594931330161,
        0.32514568182056, 0.51805210836110, 0.84439215652721, 0.32247180718678, 0.91742434204938,
        0.63578671051408, 0.41615858996980, 0.47946322494889, 0.44837291206650, 0.86113981139333,
        0.44240231300194, 0.81776055937064, 0.69988784992829, 0.10562920332902, 0.94362262454839,
        0.34446241130104, 0.78473929476074, 0.26906158668602, 0.94517411310940, 0.84192915269131,
        0.63931696104011, 0.36581617683817, 0.48485333355210, 0.68779608512011
    };

    // Input IMU measurements
    y_imu_t imu = {
        .array = {
            0.359228210401861,
            0.736340074301202,
            0.394707475278763,
            0.683415866967978,
            0.704047430334266,
            0.442305413383371,
            0.019577623553319,
            0.330857880214071,
            0.424309496833137,
            0.270270423432065
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    const y_imu_t bias = {
        .array = {
            0.591161394286367,
            2.465163554883929,
            1.289764228149799,
            2.663312862769061,
            1.173548986383490,
            2.307343162164887,
            1.190374551040850,
            2.425542287662036,
            2.265231297021251,
            1.132186634505309
        }
    };

    static double R_MTI_arr[SIZE_IMU_MEAS * SIZE_IMU_MEAS] = {};
    static arm_matrix_instance_f64 R_MTI = {
        .numRows = SIZE_IMU_MEAS, .numCols = SIZE_IMU_MEAS, .pData = R_MTI_arr
    };
    static const double R_MTI_diag[SIZE_IMU_MEAS] = {1e-6, 1e-6, 1e-6, 0.01, 0.01, 0.01, 1};
    math_init_matrix_diag(&R_MTI, (uint16_t)SIZE_IMU_MEAS, R_MTI_diag);

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.641432637,
            -0.537651752,
            -0.545995779,
            0.037193738,
            -1.983456121,
            -0.502995179,
            -1.887495640,
            28870.087576019,
            25878.817776894,
            33531.923542904,
            8706.718539528,
            -5645.552985178,
            -7485.796500750
        }

    };

    double expected_P_flat[SIZE_STATE * SIZE_STATE] = {
        -0.472258744, 0.395595039,  0.402203417,  -0.026977122, -0.000003576, 0.000000431,
        -0.000000200, 0.738669717,  1.265044706,  -0.723138538, 0.019121425,  1.071927512,
        0.199069439,  0.396057873,  -0.331421867, -0.337162569, 0.022614649,  0.000002997,
        -0.000000361, 0.000000168,  -0.619230773, -1.060084359, 0.605981040,  -0.016028534,
        -0.898367549, -0.166889611, 0.402226970,  -0.336788448, -0.342213298, 0.022966957,
        0.000003044,  -0.000000367, 0.000000170,  -0.628575873, -1.076753217, 0.615632491,
        -0.016276928, -0.912538416, -0.169495813, -0.027390868, 0.022934592,  0.023317679,
        -0.001362871, -0.000000207, 0.000000025,  -0.000000012, 0.042914534,  0.073358019,
        -0.041824042, 0.001108274,  0.062316522,  0.011659377,  0.000000038,  -0.000000032,
        -0.000000032, 0.000000002,  0.000001000,  -0.000000000, -0.000000000, -0.000000100,
        -0.000000329, -0.000000024, -0.000000003, -0.000001233, 0.000000324,  0.000000214,
        -0.000000179, -0.000000182, 0.000000012,  0.000000000,  0.000001000,  0.000000000,
        -0.000000898, -0.000001604, 0.000000912,  -0.000000027, -0.000001521, -0.000001191,
        0.000000160,  -0.000000133, -0.000000136, 0.000000009,  0.000000000,  0.000000000,
        0.000001000,  -0.000000711, -0.000001495, 0.000001017,  -0.000000018, 0.000000246,
        0.000000188,  -0.658855688, 0.551874248,  0.560893620,  -0.037762393, -0.000002935,
        0.000000043,  -0.000000382, 0.497340384,  1.659567669,  -1.026927587, 0.023702959,
        0.861477417,  0.448710833,  -0.498344783, 0.417366012,  0.424322901,  -0.028599839,
        -0.000003253, 0.000000478,  0.000000021,  0.450089888,  1.657320875,  -1.165663665,
        0.021246109,  0.926610777,  0.226216165,  -0.893658872, 0.748674346,  0.760749932,
        -0.051259806, -0.000003803, 0.000000001,  -0.000000223, 0.868985845,  1.648027581,
        -0.533317355, 0.027529724,  0.891541454,  0.884089638,  -0.002724860, 0.002278764,
        0.002317910,  -0.000154036, -0.000000034, 0.000000001,  0.000000002,  0.006715207,
        0.011586880,  -0.001856155, 0.007150543,  0.016782988,  0.007722196,  0.268044792,
        -0.224575296, -0.228263641, 0.015551010,  0.000002146,  -0.000000820, 0.000000566,
        0.049650848,  -0.849780256, 0.413081321,  -0.004631912, -0.930102102, -0.483429931,
        0.457751564,  -0.383424332, -0.389761679, 0.026281082,  0.000003503,  -0.000000803,
        -0.000000622, 0.181290715,  -0.990460383, 0.830267995,  -0.006142434, -1.556656347,
        0.368956734
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_matrix_correct_imu(&state, P_flat, &R_MTI, &imu, &bias);

    // Assert
    double tolerance = 1e-6;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
    }

    // do it again!

    // Arrange
    // Initial state estimate
    x_state_t state2 = {
        .array = {
            8.834741558736747,
            1.407644570039071,
            7.699705252613202,
            5.802880831830792,
            3.386449892509485,
            1.718313257126727,
            3.854276936814474,
            4.338198549286707,
            1.085504519674461,
            5.305567362255530,
            2.035689117774082,
            3.461572119324697,
            5.246877444729065
        }
    };

    // Covariance matrix

    double P_flat2[SIZE_STATE * SIZE_STATE] = {
        0.25180612247231, 0.26072799905547, 0.63853075827184, 0.61095865874620, 0.63770909807217,
        0.78051965273136, 0.47135715371061, 0.76550001662144, 0.20893492242602, 0.83291681907522,
        0.54471611052676, 0.76350464084881, 0.39345636121527, 0.29044066427698, 0.59435625066433,
        0.03360383606643, 0.77880224182409, 0.95769393984158, 0.67533206574700, 0.03576273326912,
        0.18866197679149, 0.70928170271055, 0.25644099222915, 0.64731148029313, 0.62789637961417,
        0.67143113967403, 0.61709088439322, 0.02251259274023, 0.06880609911805, 0.42345291896274,
        0.24070703548016, 0.00671531431848, 0.17587441568353, 0.28749817306613, 0.23623057699380,
        0.61346073681288, 0.54388593399964, 0.77198038555425, 0.74125794345421, 0.26528090981003,
        0.42525932021414, 0.31959973518050, 0.09082328578744, 0.67612230386375, 0.60217048758180,
        0.72175803339110, 0.09111346368654, 0.11939624779731, 0.58224916452723, 0.72104662057981,
        0.93285357027882, 0.52005246739039, 0.82437626668884, 0.31271888682062, 0.53086428069413,
        0.26647149077907, 0.28906457167448, 0.38677119452099, 0.47348599296532, 0.57620938066301,
        0.60730394068564, 0.54073933712441, 0.52249530577710, 0.97274085400301, 0.34771267127753,
        0.98266339972195, 0.16148474431175, 0.65444570775707, 0.15365671759131, 0.67180816541422,
        0.91599124413143, 0.15272120043823, 0.68336324329465, 0.45013769696590, 0.86994103235801,
        0.99370462412085, 0.19202834942778, 0.14999725383168, 0.73024879226760, 0.17876618675237,
        0.40761919704115, 0.28100530253387, 0.69514049955174, 0.00115105712911, 0.34112460704911,
        0.54659311459032, 0.45872549364887, 0.26477902647563, 0.21867663239963, 0.13887420282916,
        0.58609206723146, 0.34387700411498, 0.42288568910009, 0.81998122278194, 0.44008513900172,
        0.06799276847001, 0.46244915924233, 0.60738921376835, 0.42572884187119, 0.66194475190565,
        0.31807407548106, 0.10579827325023, 0.69626633708300, 0.26214531772781, 0.58406933327845,
        0.09422933888774, 0.71835894320588, 0.52714274176065, 0.25479015659701, 0.42434903981538,
        0.19174525546180, 0.64444278143134, 0.77028551480366, 0.11921454105419, 0.10969746452319,
        0.09382002677487, 0.04445409227824, 0.10776901524374, 0.59852366875674, 0.96864933023109,
        0.45742436568767, 0.22404003082422, 0.46091636602896, 0.73842683997694, 0.64761763017268,
        0.35021801344111, 0.93982947034492, 0.06359137097511, 0.52540440385934, 0.75493326723118,
        0.90630815064973, 0.47092425635833, 0.53133390656567, 0.87537159860419, 0.66783272701372,
        0.77015972860861, 0.24284959831817, 0.67901675409320, 0.66200959835914, 0.64555187497252,
        0.40457999585763, 0.53034421839286, 0.24278535782096, 0.87965372448191, 0.69594931330161,
        0.32514568182056, 0.51805210836110, 0.84439215652721, 0.32247180718678, 0.91742434204938,
        0.63578671051408, 0.41615858996980, 0.47946322494889, 0.44837291206650, 0.86113981139333,
        0.44240231300194, 0.81776055937064, 0.69988784992829, 0.10562920332902, 0.94362262454839,
        0.34446241130104, 0.78473929476074, 0.26906158668602, 0.94517411310940, 0.84192915269131,
        0.63931696104011, 0.36581617683817, 0.48485333355210, 0.68779608512011
    };

    // Input IMU measurements
    y_imu_t imu2 = {
        .array = {
            0.359228210401861,
            0.736340074301202,
            0.394707475278763,
            0.683415866967978,
            0.704047430334266,
            0.442305413383371,
            0.019577623553319,
            0.330857880214071,
            0.424309496833137,
            0.270270423432065
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    const y_imu_t bias2 = {
        .array = {
            0.591161394286367,
            2.465163554883929,
            1.289764228149799,
            2.663312862769061,
            1.173548986383490,
            2.307343162164887,
            1.190374551040850,
            2.425542287662036,
            2.265231297021251,
            1.132186634505309
        }
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_matrix_correct_imu(&state2, P_flat2, &R_MTI, &imu2, &bias2);

    // Assert
    // Check state (x)
    // for (int i = 0; i < SIZE_STATE; i++) {
    //     EXPECT_NEAR(state2.array[i], expected_state.array[i], tolerance);
    // }

    // // Check covariance (P)
    // for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
    //     EXPECT_NEAR(P_flat2[i], expected_P_flat[i], tolerance);
    // }
}

TEST_F(EstimatorEKFTest, EKFCorrectEncoder) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            2.426878243614206,
            4.001402344444001,
            0.709431693136077,
            2.108806413131375,
            4.578677625945335,
            3.961036647797772,
            4.797462131964515,
            3.278703495782934,
            0.178558392870948,
            4.245646529343886,
            4.669966238787753,
            3.393675774288867,
            3.788700652891667
        }
    };

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.50150522974397,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31864903478599, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 1.11722922016661, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.59435520762892, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        1.46906291404807, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.01848024017227,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 2.85489139433318, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 2.76099611950969, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.15803099304238, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        2.21357428655099, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.80735827919567,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 1.26850684502642
    };

    const double R = 0.01;
    const double encoder = 0.431651170248720; // encoder revival

    // expected outputs:
    x_state_t expected_state = {
        .array = {
            0.468344253752577,
            0.772199347002077,
            0.136907674616354,
            0.406962058548029,
            4.57867762594533,
            3.96103664779777,
            4.79746213196452,
            3.27870349578293,
            0.178558392870948,
            4.24564652934389,
            4.66996623878775,
            3.39367577428887,
            0.457908749515521
        }
    };

    double expected_P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.50150522974397,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.31864903478599,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1.11722922016661,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.59435520762892,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1.46906291404807,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1.01848024017227,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2.85489139433318,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2.76099611950969,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.15803099304238,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2.21357428655099,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.80735827919567,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0.00992178375861731
    };

    // action
    ekf_matrix_correct_encoder(&state, P_flat, R, encoder);

    // assert
    // Assert
    // Check state (x)
    double tolerance = 1e-6;
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
    }
}

// same matlab script as below but imu_select = [1 0 1]
TEST_F(EstimatorEKFTest, EKFAlgorithmSelectIMU1) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            2.426878243614206,
            4.001402344444001,
            0.709431693136077,
            2.108806413131375,
            4.578677625945335,
            3.961036647797772,
            4.797462131964515,
            3.278703495782934,
            0.178558392870948,
            4.245646529343886,
            4.669966238787753,
            3.393675774288867,
            3.788700652891667
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.50150522974397,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31864903478599, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 1.11722922016661, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.59435520762892, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        1.46906291404807, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.01848024017227,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 2.85489139433318, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 2.76099611950969, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.15803099304238, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        2.21357428655099, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.80735827919567,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 1.26850684502642
    };

    // Input IMU measurements
    y_imu_t imu_1 = {
        .array = {
            2.711216972515416,
            4.238310136658316,
            2.074393441904026,
            7.598779134258502,
            1.752878606103443,
            2.033296028751589,
            1.536372424330727,
            2.048978680348982,
            3.921288156935092,
            2.799920579853715
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_1 = {
        .array = {
            0.942736984276934,
            0.417744104316662,
            0.983052466469856,
            0.301454948712065,
            0.701098755900926,
            0.666338851584426,
            0.539126465042857,
            0.698105520180308,
            0.666527913402587,
            0.178132454400338
        }
    };

    // Input IMU measurements
    y_imu_t imu_2 = {
        .array = {
            7.387037136825951,
            3.441659130636672,
            1.478530560993089,
            7.239047749439143,
            7.837987026848682,
            3.510959785008826,
            0.888953787524790,
            2.064517567296535,
            3.269758768900417,
            4.759168592068915
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_2 = {
        .array = {
            0.128014399720173,
            0.999080394761361,
            0.171121066356432,
            0.032600820530528,
            0.561199792709660,
            0.881866500451810,
            0.669175304534394,
            0.190433267179954,
            0.368916546063895,
            0.460725937260412
        }
    };

    const double cmd = 0.547870901214845;
    const double encoder = 0.431651170248720; // this is unused
    const double dt = 1.038711463665142;
    const bool is_dead_mti = false;
    const bool is_dead_altimu = true;
    const bool is_dead_encoder = false;

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.599217,
            -0.097702,
            0.539078,
            0.583770,
            7.297324,
            1.051882,
            1.367093,
            -990.473458,
            14924.798837,
            6246.387691,
            8438.471128,
            3.397816,
            0.431575
        }

    };

    double expected_P_flat[SIZE_STATE * SIZE_STATE] = {
        0.322569,   -0.052628,  0.288716,  0.313544,  -0.000000,  -0.000000,  -0.000000, 0.208322,
        4.898166,   -2.341114,  0.001976,  0.000026,  -0.000000,  -0.052628,  0.010686,  -0.047405,
        -0.051480,  0.000000,   0.000000,  0.000000,  -0.039710,  -0.806521,  0.382624,  -0.000323,
        -0.000004,  0.000000,   0.288716,  -0.047405, 0.262107,   0.282425,   -0.000000, -0.000000,
        -0.000000,  0.191807,   4.407175,  -2.114110, 0.001775,   0.000023,   -0.000000, 0.313544,
        -0.051480,  0.282425,   0.308753,  -0.000000, -0.000000,  -0.000000,  0.195459,  4.782441,
        -2.285972,  0.001922,   0.000025,  -0.000000, -0.000000,  0.000000,   -0.000000, -0.000000,
        0.000001,   -0.000000,  -0.000000, 0.000000,  -0.000000,  -0.000000,  -0.000000, 0.000000,
        -0.000000,  -0.000000,  0.000000,  -0.000000, -0.000000,  -0.000000,  0.000001,  -0.000000,
        -0.000001,  -0.000003,  0.000002,  0.000000,  0.000000,   -0.000000,  -0.000000, 0.000000,
        -0.000000,  -0.000000,  -0.000000, -0.000000, 0.000001,   -0.000001,  -0.000004, 0.000002,
        0.000000,   0.000000,   -0.000000, 0.208322,  -0.039710,  0.191807,   0.195459,  0.000000,
        -0.000001,  -0.000001,  74.067480, -2.831741, -53.043406, -0.000844,  -0.000500, 0.000000,
        4.898166,   -0.806521,  4.407175,  4.782441,  -0.000000,  -0.000003,  -0.000004, -2.831741,
        128.493322, -81.086328, 0.012284,  0.000127,  -0.000000,  -2.341114,  0.382624,  -2.114110,
        -2.285972,  -0.000000,  0.000002,  0.000002,  -53.043406, -81.086328, 99.918929, 0.005177,
        0.000334,   -0.000000,  0.001976,  -0.000323, 0.001775,   0.001922,   -0.000000, 0.000000,
        0.000000,   -0.000844,  0.012284,  0.005177,  0.006937,   0.000000,   -0.000000, 0.000026,
        -0.000004,  0.000023,   0.000025,  0.000000,  0.000000,   0.000000,   -0.000500, 0.000127,
        0.000334,   0.000000,   1.074162,  0.000000,  -0.000000,  0.000000,   -0.000000, -0.000000,
        -0.000000,  -0.000000,  -0.000000, 0.000000,  -0.000000,  -0.000000,  -0.000000, 0.000000,
        0.001000
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_algorithm(
        &state,
        P_flat,
        &imu_1,
        &bias_1,
        &imu_2,
        &bias_2,
        cmd,
        encoder,
        dt,
        is_dead_mti,
        is_dead_altimu,
        is_dead_encoder
    );

    // Assert
    double tolerance = 1e-6;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        double tol = abs(expected_state.array[i]) > 90 ? abs(tolerance * expected_state.array[i])
                                                       : tolerance;
        EXPECT_NEAR(state.array[i], expected_state.array[i], tol);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        double tol = expected_state.array[i] > 90 ? tolerance * expected_state.array[i] : tolerance;
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tol);
    }
}

// same matlab script as for SelectBoth but imu_select = [0 1 1]
TEST_F(EstimatorEKFTest, EKFAlgorithmSelectIMU2) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            2.426878243614206,
            4.001402344444001,
            0.709431693136077,
            2.108806413131375,
            4.578677625945335,
            3.961036647797772,
            4.797462131964515,
            3.278703495782934,
            0.178558392870948,
            4.245646529343886,
            4.669966238787753,
            3.393675774288867,
            3.788700652891667
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.50150522974397,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31864903478599, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 1.11722922016661, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.59435520762892, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        1.46906291404807, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.01848024017227,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 2.85489139433318, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 2.76099611950969, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.15803099304238, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        2.21357428655099, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.80735827919567,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 1.26850684502642
    };

    // Input IMU measurements
    y_imu_t imu_1 = {
        .array = {
            2.711216972515416,
            4.238310136658316,
            2.074393441904026,
            7.598779134258502,
            1.752878606103443,
            2.033296028751589,
            1.536372424330727,
            2.048978680348982,
            3.921288156935092,
            2.799920579853715
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_1 = {
        .array = {
            0.942736984276934,
            0.417744104316662,
            0.983052466469856,
            0.301454948712065,
            0.701098755900926,
            0.666338851584426,
            0.539126465042857,
            0.698105520180308,
            0.666527913402587,
            0.178132454400338
        }
    };

    // Input IMU measurements
    y_imu_t imu_2 = {
        .array = {
            7.387037136825951,
            3.441659130636672,
            1.478530560993089,
            7.239047749439143,
            7.837987026848682,
            3.510959785008826,
            0.888953787524790,
            2.064517567296535,
            3.269758768900417,
            4.759168592068915
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_2 = {
        .array = {
            0.128014399720173,
            0.999080394761361,
            0.171121066356432,
            0.032600820530528,
            0.561199792709660,
            0.881866500451810,
            0.669175304534394,
            0.190433267179954,
            0.368916546063895,
            0.460725937260412
        }
    };

    const double cmd = 0.547870901214845;
    const double encoder = 0.431651170248720; // this is unused
    const double dt = 1.038711463665142;
    const bool is_dead_mti = true;
    const bool is_dead_altimu = false;
    const bool is_dead_encoder = false;

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.614973,
            0.398197,
            0.581369,
            0.353917,
            7.206447,
            7.276787,
            2.629093,
            -3080.143252,
            7875.918717,
            5218.967823,
            8439.052871,
            3.398171,
            0.431575
        }

    };

    double expected_P_flat[SIZE_STATE * SIZE_STATE] = {
        0.309854,   0.199564,   0.290351,  0.177540,  -0.000000,  -0.000000,  -0.000000,  -0.069289,
        3.782697,   -2.369563,  0.001982,  0.000025,  -0.000000,  0.199564,   0.134242,   0.189457,
        0.115842,   -0.000000,  -0.000000, -0.000000, -0.058796,  2.438501,   -1.541359,  0.001281,
        0.000016,   -0.000000,  0.290351,  0.189457,  0.279683,   0.168549,   -0.000000,  -0.000000,
        -0.000000,  -0.057730,  3.580143,  -2.259647, 0.001872,   0.000023,   -0.000000,  0.177540,
        0.115842,   0.168549,   0.107086,  -0.000000, -0.000000,  -0.000000,  -0.055257,  2.190503,
        -1.371447,  0.001138,   0.000014,  -0.000000, -0.000000,  -0.000000,  -0.000000,  -0.000000,
        0.000001,   -0.000000,  -0.000000, 0.000000,  -0.000000,  -0.000000,  -0.000000,  0.000000,
        -0.000000,  -0.000000,  -0.000000, -0.000000, -0.000000,  -0.000000,  0.000001,   -0.000000,
        -0.000000,  -0.000002,  0.000002,  -0.000000, 0.000000,   -0.000000,  -0.000000,  -0.000000,
        -0.000000,  -0.000000,  -0.000000, -0.000000, 0.000001,   -0.000001,  -0.000004,  0.000002,
        0.000000,   0.000000,   -0.000000, -0.069289, -0.058796,  -0.057730,  -0.055257,  0.000000,
        -0.000000,  -0.000001,  74.005207, -6.839049, -51.003011, -0.002556,  -0.000522,  0.000000,
        3.782697,   2.438501,   3.580143,  2.190503,  -0.000000,  -0.000002,  -0.000004,  -6.839049,
        100.333884, -74.530491, 0.006505,  0.000037,  -0.000000,  -2.369563,  -1.541359,  -2.259647,
        -1.371447,  -0.000000,  0.000002,  0.000002,  -51.003011, -74.530491, 101.157633, 0.004318,
        0.000332,   -0.000000,  0.001982,  0.001281,  0.001872,   0.001138,   -0.000000,  -0.000000,
        0.000000,   -0.002556,  0.006505,  0.004318,  0.006938,   0.000000,   -0.000000,  0.000025,
        0.000016,   0.000023,   0.000014,  0.000000,  0.000000,   0.000000,   -0.000522,  0.000037,
        0.000332,   0.000000,   1.074162,  0.000000,  -0.000000,  -0.000000,  -0.000000,  -0.000000,
        -0.000000,  -0.000000,  -0.000000, 0.000000,  -0.000000,  -0.000000,  -0.000000,  0.000000,
        0.001000
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_algorithm(
        &state,
        P_flat,
        &imu_1,
        &bias_1,
        &imu_2,
        &bias_2,
        cmd,
        encoder,
        dt,
        is_dead_mti,
        is_dead_altimu,
        is_dead_encoder
    );

    // Assert
    double tolerance = 1e-6;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        double tol = abs(expected_state.array[i]) > 90 ? abs(tolerance * expected_state.array[i])
                                                       : tolerance;
        EXPECT_NEAR(state.array[i], expected_state.array[i], tol);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        double tol = expected_state.array[i] > 90 ? tolerance * expected_state.array[i] : tolerance;
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tol);
    }
}

// clang-format off
/*
x = [ ...
    2.426878243614206;
    4.001402344444001;
    0.709431693136077;
    2.108806413131375;
    4.578677625945335;
    3.961036647797772;
    4.797462131964515;
    3.278703495782934;
    0.178558392870948;
    4.245646529343886;
    4.669966238787753;
    3.393675774288867;
    3.788700652891667
];

% Define corrected diagonal covariance matrix P (13x13)
P = diag([ ...
    2.95219117313746;
    0.50150522974397;
    0.31864903478599;
    1.11722922016661;
    0.59435520762892;
    1.46906291404807;
    1.01848024017227;
    2.85489139433318;
    2.76099611950969;
    0.15803099304238;
    2.21357428655099;
    0.80735827919567;
    1.26850684502642
]);

% Correct IMU measurements
IMU_1 = [ ...
    2.711216972515416;
    4.238310136658316;
    2.074393441904026;
    7.598779134258502;
    1.752878606103443;
    2.033296028751589;
    1.536372424330727;
    2.048978680348982;
    3.921288156935092;
    2.799920579853715
];

IMU_2 = [ ...
    7.387037136825951;
    3.441659130636672;
    1.478530560993089;
    7.239047749439143;
    7.837987026848682;
    3.510959785008826;
    0.888953787524790;
    2.064517567296535;
    3.269758768900417;
    4.759168592068915
];

% IMU biases
bias_1 = [ ...
    0.942736984276934;
    0.417744104316662;
    0.983052466469856;
    0.301454948712065;
    0.701098755900926;
    0.666338851584426;
    0.539126465042857;
    0.698105520180308;
    0.666527913402587;
    0.178132454400338
];

bias_2 = [ ...
    0.128014399720173;
    0.999080394761361;
    0.171121066356432;
    0.032600820530528;
    0.561199792709660;
    0.881866500451810;
    0.669175304534394;
    0.190433267179954;
    0.368916546063895;
    0.460725937260412
];

% Bias struct
b.bias_1 = bias_1;
b.bias_2 = bias_2;

% Inputs
cmd = 0.547870901214845;
encoder = 0.431651170248720;
T = 1.038711463665142;

% IMU selector
IMU_select = [1 0 1];

% Call EKF (make sure ekf_algorithm.m is available)
[xhat, Phat] = ekf_algorithm(x, P, b, 0, T, IMU_1, IMU_2, cmd, encoder, IMU_select);

% Display results
disp('Corrected state x:');
disp(xhat);

disp('Corrected covariance P:');
disp(Phat);

% Assuming xhat and Phat are already computed

% Convert xhat (13x1 vector) into C array format, row-major order
xhat_c = reshape(xhat, 1, []);  % Flatten the vector to a row vector

% Display xhat in C array format
fprintf('{ ');
fprintf('%f, ', xhat_c(1:end-1));  % Print all except the last element
fprintf('%f }; \n', xhat_c(end));  % Print the last element

% Convert Phat (13x13 matrix) into C array format, row-major order
Phat_c = reshape(Phat, 1, []);  % Flatten the matrix to a row vector

fprintf('{ ');
fprintf('%f, ', Phat_c(1:end-1));  % Print all except the last element
fprintf('%f }; \n', Phat_c(end));  % Print the last element

*/
// clang-format on
TEST_F(EstimatorEKFTest, EKFAlgorithmSelectBoth) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            2.426878243614206,
            4.001402344444001,
            0.709431693136077,
            2.108806413131375,
            4.578677625945335,
            3.961036647797772,
            4.797462131964515,
            3.278703495782934,
            0.178558392870948,
            4.245646529343886,
            4.669966238787753,
            3.393675774288867,
            3.788700652891667
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.50150522974397,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31864903478599, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 1.11722922016661, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.59435520762892, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        1.46906291404807, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.01848024017227,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 2.85489139433318, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 2.76099611950969, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.15803099304238, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        2.21357428655099, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.80735827919567,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 1.26850684502642
    };

    // Input IMU measurements
    y_imu_t imu_1 = {
        .array = {
            2.711216972515416,
            4.238310136658316,
            2.074393441904026,
            7.598779134258502,
            1.752878606103443,
            2.033296028751589,
            1.536372424330727,
            2.048978680348982,
            3.921288156935092,
            2.799920579853715
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_1 = {
        .array = {
            0.942736984276934,
            0.417744104316662,
            0.983052466469856,
            0.301454948712065,
            0.701098755900926,
            0.666338851584426,
            0.539126465042857,
            0.698105520180308,
            0.666527913402587,
            0.178132454400338
        }
    };

    // Input IMU measurements
    y_imu_t imu_2 = {
        .array = {
            7.387037136825951,
            3.441659130636672,
            1.478530560993089,
            7.239047749439143,
            7.837987026848682,
            3.510959785008826,
            0.888953787524790,
            2.064517567296535,
            3.269758768900417,
            4.759168592068915
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_2 = {
        .array = {
            0.128014399720173,
            0.999080394761361,
            0.171121066356432,
            0.032600820530528,
            0.561199792709660,
            0.881866500451810,
            0.669175304534394,
            0.190433267179954,
            0.368916546063895,
            0.460725937260412
        }
    };

    const double cmd = 0.547870901214845;
    const double encoder = 0.431651170248720;
    const double dt = 1.038711463665142;
    const bool is_dead_mti = false;
    const bool is_dead_altimu = false;
    const bool is_dead_encoder = false;

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.765158,
            0.090421,
            0.555753,
            0.312241,
            7.251886,
            4.164408,
            1.998159,
            -1286.045643,
            12462.078141,
            8972.256621,
            9407.744373,
            3.376353,
            0.431576
        }

    };

    double expected_P_flat[SIZE_STATE * SIZE_STATE] = {
        0.002376,  -0.000243,  0.000943,  0.000763,  -0.000000,  -0.000000,  -0.000000, 0.002848,
        0.025534,  -0.010842,  0.000011,  0.000000,  -0.000000,  -0.000243,  0.001491,  -0.000249,
        0.000056,  0.000000,   0.000000,  0.000000,  -0.005303,  -0.006378,  0.001135,  -0.000001,
        -0.000000, 0.000000,   0.000943,  -0.000249, 0.002235,   0.000630,   -0.000000, -0.000000,
        -0.000000, 0.005696,   0.019973,  -0.013471, 0.000007,   0.000000,   -0.000000, 0.000763,
        0.000056,  0.000630,   0.002666,  -0.000000, -0.000000,  -0.000000,  -0.006423, 0.016925,
        -0.006222, 0.000003,   0.000000,  -0.000000, -0.000000,  0.000000,   -0.000000, -0.000000,
        0.000000,  -0.000000,  -0.000000, 0.000000,  0.000000,   -0.000000,  0.000000,  0.000000,
        -0.000000, -0.000000,  0.000000,  -0.000000, -0.000000,  -0.000000,  0.000000,  -0.000000,
        -0.000000, -0.000000,  0.000000,  0.000000,  0.000000,   -0.000000,  -0.000000, 0.000000,
        -0.000000, -0.000000,  -0.000000, -0.000000, 0.000000,   -0.000000,  -0.000001, 0.000000,
        0.000000,  0.000000,   -0.000000, 0.002848,  -0.005303,  0.005696,   -0.006423, 0.000000,
        -0.000000, -0.000000,  73.933052, -5.971443, -51.539969, -0.001806,  -0.000517, 0.000000,
        0.025534,  -0.006378,  0.019973,  0.016925,  0.000000,   -0.000000,  -0.000001, -5.971443,
        54.275281, -45.577629, -0.015093, -0.000262, 0.000000,   -0.010842,  0.001135,  -0.013471,
        -0.006222, -0.000000,  0.000000,  0.000000,  -51.539969, -45.577629, 82.919779, 0.016700,
        0.000520,  -0.000000,  0.000011,  -0.000001, 0.000007,   0.000003,   0.000000,  0.000000,
        0.000000,  -0.001806,  -0.015093, 0.016700,  0.005939,   -0.000000,  0.000000,  0.000000,
        -0.000000, 0.000000,   0.000000,  0.000000,  0.000000,   0.000000,   -0.000517, -0.000262,
        0.000520,  -0.000000,  1.074162,  0.000000,  -0.000000,  0.000000,   -0.000000, -0.000000,
        -0.000000, -0.000000,  -0.000000, 0.000000,  0.000000,   -0.000000,  0.000000,  0.000000,
        0.001000
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_algorithm(
        &state,
        P_flat,
        &imu_1,
        &bias_1,
        &imu_2,
        &bias_2,
        cmd,
        encoder,
        dt,
        is_dead_mti,
        is_dead_altimu,
        is_dead_encoder
    );

    // Assert
    double tolerance = 1e-6;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
    }
}
