#include "fff.h"
#include <gtest/gtest.h>

extern "C" {
#include "application/estimator/ekf.h"
#include "application/estimator/estimator_types.h"
#include "arm_math.h"
#include "common/math/math-algebra3d.h"

DEFINE_FFF_GLOBALS;
}

class EstimatorEKFTest : public ::testing::Test {
protected:
    void SetUp() override {
        FFF_RESET_HISTORY();
    }

    void TearDown() override {}
};

TEST_F(EstimatorEKFTest, EKFPredictNominalCheckWithAllZerosP) {
    // Arrange
    x_state_t state = {
        .array = {
            0.814723686393179,
            0.905791937075619,
            0.126986816293506,
            0.913375856139019,
            0.632359246225410,
            0.097540404999410,
            0.278498218867048,
            0.546881519204984,
            0.957506835434298,
            0.964888535199277,
            0.157613081677548,
            0.970592781760616,
            0.957166948242946
        }
    };
    double P_flat[SIZE_STATE * SIZE_STATE] = {0};
    const u_dynamics_t input = {
        .cmd = 4.217612826262750,
        .acceleration = {.array = {1.456126946168524, 2.400841406666400, 0.425659015881646}}
    };
    double dt = 0.915735525189067;

    // set up Q like ekf_algorithm would
    double Q_diag[SIZE_STATE] = {
        1e-8, 1e-8, 1e-8, 1e-8, 1e0, 1e0, 1e0, 2e-2, 2e-2, 2e-2, 1e-2, 100, 10
    };
    double Q_arr[SIZE_STATE * SIZE_STATE] = {0};
    arm_matrix_instance_f64 Q = {.numRows = SIZE_STATE, .numCols = SIZE_STATE, .pData = Q_arr};
    math_init_matrix_diag(&Q, (uint16_t)SIZE_STATE, Q_diag);

    x_state_t expected_state = {
        .array = {
            0.268274165208879,
            0.696419511023482,
            0.194712315844409,
            0.636487196262266,
            0.643134076016596,
            0.006279518794539,
            0.471014707988784,
            -0.400684442488099,
            8.416935880119659,
            -6.314095921040007,
            0.525564693616072,
            1.457215728968408,
            60.671289317422811
        }
    };

    double expected_P_flat[169] = {9.15735525189067e-09, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   9.15735525189067e-09, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   9.15735525189067e-09, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   9.15735525189067e-09, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0.915735525189067,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0.915735525189067,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0.915735525189067,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0.0183147105037813,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0.0183147105037813,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0.0183147105037813,   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   0.00915735525189067,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   91.5735525189067,     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                   9.15735525189067};

    // Act
    ekf_matrix_predict(&state, P_flat, &input, Q.pData, dt);

    // Assert
    double tolerance = 1e-6;

    // check x
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // check P
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
    }
}

TEST_F(EstimatorEKFTest, EKFPredictNominalCheckWithNoneAllZerosP) {
    // Arrange
    x_state_t state = {
        .array = {
            0.814723686393179,
            0.905791937075619,
            0.126986816293506,
            0.913375856139019,
            0.632359246225410,
            0.097540404999410,
            0.278498218867048,
            0.546881519204984,
            0.957506835434298,
            0.964888535199277,
            0.157613081677548,
            0.970592781760616,
            0.957166948242946
        }
    };
    double P_flat[SIZE_STATE * SIZE_STATE] = {
        0.81472368639318, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.90579193707562,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.12698681629351, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.91337585613902, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.63235924622541, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.09754040499941, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.27849821886705,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.54688151920498, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.95750683543430, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.96488853519928, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.15761308167755, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.97059278176062,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.95716694824295
    };
    const u_dynamics_t input = {
        .cmd = 4.217612826262750,
        .acceleration = {.array = {1.456126946168524, 2.400841406666400, 0.425659015881646}}
    };
    double dt = 0.915735525189067;

    // set up Q like ekf_algorithm would
    double Q_diag[SIZE_STATE] = {
        1e-8, 1e-8, 1e-8, 1e-8, 1e0, 1e0, 1e0, 2e-2, 2e-2, 2e-2, 1e-2, 100, 10
    };
    double Q_arr[SIZE_STATE * SIZE_STATE] = {0};
    arm_matrix_instance_f64 Q = {.numRows = SIZE_STATE, .numCols = SIZE_STATE, .pData = Q_arr};
    math_init_matrix_diag(&Q, (uint16_t)SIZE_STATE, Q_diag);

    x_state_t expected_state = {
        .array = {
            0.268274165208879,
            0.696419511023482,
            0.194712315844409,
            0.636487196262266,
            0.643134076016596,
            0.006279518794539,
            0.471014707988784,
            -0.400684442488099,
            8.416935880119659,
            -6.314095921040007,
            0.525564693616072,
            1.457215728968408,
            60.671289317422811
        }
    };

    double expected_P_flat[169] = {
        0.97335658135130,   -0.06567910390700,  0.00323946322590,   -0.03573628443570,
        -0.16578046094900,  -0.00407823086160,  -0.08940817458020,  -6.20764780018850,
        8.19997396823400,   2.74637204206120,   0.12583276427580,   0.00000000000000,
        0.00000000000000,   -0.06567910390700,  1.02338063439350,   -0.06772373934860,
        0.01451882784960,   0.14663033272250,   -0.05993343088070,  0.03984732989900,
        -12.35427707678840, 0.48662399840100,   -9.65250777468960,  -1.76393422161400,
        0.00000000000000,   0.00000000000000,   0.00323946322590,   -0.06772373934860,
        0.29361499196620,   0.20859209126820,   0.18590490309220,   -0.06410098764490,
        -0.07392352909240,  3.99887350516300,   1.55346437103900,   -2.70725220335860,
        0.08154024882090,   0.00000000000000,   0.00000000000000,   -0.03573628443570,
        0.01451882784960,   0.20859209126820,   0.96377758233810,   -0.02338443310920,
        0.07198551355930,   0.05051248152630,   8.29253671787570,   10.25257726032730,
        -10.00008021424920, 0.40307732930370,   0.00000000000000,   0.00000000000000,
        -0.16578046094900,  0.14663033272250,   0.18590490309220,   -0.02338443310920,
        1.55709714044770,   -0.15132871428870,  0.01772432758650,   0.04528128185340,
        -0.56664272671390,  0.55641525727030,   0.00302817334340,   0.00880145090770,
        -0.18656305856190,  -0.00407823086160,  -0.05993343088070,  -0.06410098764490,
        0.07198551355930,   -0.15132871428870,  1.15126881850090,   0.08818142812630,
        -0.09316465448670,  0.23454779011470,   -0.22197527179970,  -0.03409427723340,
        0.00000000000000,   0.00000000000000,   -0.08940817458020,  0.03984732989900,
        -0.07392352909240,  0.05051248152630,   0.01772432758650,   0.08818142812630,
        1.23541932055910,   -0.26835069218600,  0.13294521353960,   0.09474102861870,
        -0.00846569669010,  0.00000000000000,   0.00000000000000,   -6.20764780018850,
        -12.35427707678840, 3.99887350516300,   8.29253671787570,   0.04528128185340,
        -0.09316465448670,  -0.26835069218600,  284.09835446664000, 22.25984418277860,
        8.82338601639780,   24.92220558380130,  0.00000000000000,   0.00000000000000,
        8.19997396823400,   0.48662399840100,   1.55346437103900,   10.25257726032730,
        -0.56664272671390,  0.23454779011470,   0.13294521353960,   22.25984418277860,
        196.13202571783900, -79.28767999308460, 5.19097125479250,   0.00000000000000,
        0.00000000000000,   2.74637204206120,   -9.65250777468960,  -2.70725220335860,
        -10.00008021424920, 0.55641525727030,   -0.22197527179970,  0.09474102861870,
        8.82338601639780,   -79.28767999308460, 223.39131162140300, 15.91653552891990,
        0.00000000000000,   0.00000000000000,   0.12583276427580,   -1.76393422161400,
        0.08154024882090,   0.40307732930370,   0.00302817334340,   -0.03409427723340,
        -0.00846569669010,  24.92220558380130,  5.19097125479250,   15.91653552891990,
        4.65325468409030,   0.00000000000000,   0.00000000000000,   0.00000000000000,
        0.00000000000000,   0.00000000000000,   0.00000000000000,   0.00880145090770,
        0.00000000000000,   0.00000000000000,   0.00000000000000,   0.00000000000000,
        0.00000000000000,   0.00000000000000,   92.22117924418530,  0.00000000000000,
        0.00000000000000,   0.00000000000000,   0.00000000000000,   0.00000000000000,
        -0.18656305856190,  0.00000000000000,   0.00000000000000,   0.00000000000000,
        0.00000000000000,   0.00000000000000,   0.00000000000000,   0.00000000000000,
        296.11524043861500
    };

    // Act
    ekf_matrix_predict(&state, P_flat, &input, Q.pData, dt);

    // Assert
    double tolerance = 1e-6;

    // check x
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(state.array[i], expected_state.array[i], tolerance);
    }

    // check P
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
    }
}

TEST_F(EstimatorEKFTest, EKFCorrectNominalCheck) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            0.268274165208879,
            0.696419511023482,
            0.194712315844409,
            0.636487196262266,
            0.643134076016596,
            0.006279518794539,
            0.471014707988784,
            -0.400684442488099,
            8.416935880119659,
            -6.314095921040007,
            0.525564693616072,
            1.457215728968408,
            60.671289317422811
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {0};

    // % Initial covariance (some nonzero values for realism)
    for (int i = 0; i < SIZE_STATE; ++i) {
        P_flat[i * SIZE_STATE + i] = 0.1;
    }

    // Input IMU measurements
    y_imu_t imu = {.array = {0.01, 0.02, -0.01, 0.3, -0.2, 0.5, 0.2, -0.1, 0.4, 1013.25}};

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias = {
        .array = {
            0.001,
            -0.002,
            0.003, // Accelerometer bias (X, Y, Z)
            0.0001,
            -0.0002,
            0.0003, // Gyroscope bias (X, Y, Z)
            0.001,
            -0.002,
            0.003, // Magnetometer bias (X, Y, Z)
            0.005 // Barometer bias
        }
    };

    static double R_MTI_arr[SIZE_IMU_MEAS * SIZE_IMU_MEAS] = {};
    static arm_matrix_instance_f64 R_MTI = {
        .numRows = SIZE_IMU_MEAS, .numCols = SIZE_IMU_MEAS, .pData = R_MTI_arr
    };
    const double R_MTI_diag[SIZE_IMU_MEAS] = {1e-5, 1e-5, 1e-5, 5e-3, 5e-3, 5e-3, 2e1};
    math_init_matrix_diag(&R_MTI, (uint16_t)SIZE_IMU_MEAS, R_MTI_diag);

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.28549694962700,
            0.67882814657800,
            0.13904291106800,
            0.66208074133700,
            0.29993431997600,
            -0.19977939410900,
            0.49969713175800,
            -0.40068444248800,
            8.41693588012000,
            -6.31409592104000,
            3500.32883716231000,
            1.45721572896800,
            60.67128931742300
        }
    };

    double expected_P_flat[169] = {
        0.0999273827655030,  0.0000281411893320, -0.0000162279719410, -0.0000423732815840,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000281411893320, 0.0999082979348580,  -0.0000116328046430,
        -0.0000303747201760, 0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, -0.0000162279719410, -0.0000116328046430,
        0.0998948335032560,  0.0000175159656880, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  -0.0000423732815840,
        -0.0000303747201760, 0.0000175159656880, 0.0999338616953760,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000099990001000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000099990001000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000099990001000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.1000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.1000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.1000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0580729011452570,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.1000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.0000000000000000,  0.0000000000000000, 0.0000000000000000,  0.0000000000000000,
        0.1000000000000000
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_matrix_correct(&state, P_flat, &R_MTI, &imu.array[3], &bias.array[0]);

    // Assert
    double tolerance = 1e-5;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(
            state.array[i], expected_state.array[i], abs(expected_state.array[i] * tolerance)
        );
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], abs(expected_P_flat[i] * tolerance));
    }
}

TEST_F(EstimatorEKFTest, EKFAlgorithmSelectIMU1) {
    // Arrange
    // Initial state estimate
    x_state_t state = {
        .array = {
            2.426878243614206,
            4.001402344444001,
            0.709431693136077,
            2.108806413131375,
            4.578677625945335,
            3.961036647797772,
            4.797462131964515,
            3.278703495782934,
            0.178558392870948,
            4.245646529343886,
            4.669966238787753,
            3.393675774288867,
            3.788700652891667
        }
    };

    // Covariance matrix

    double P_flat[SIZE_STATE * SIZE_STATE] = {
        2.95219117313746, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.50150522974397,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.31864903478599, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 1.11722922016661, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.59435520762892, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        1.46906291404807, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 1.01848024017227,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 2.85489139433318, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 2.76099611950969, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.15803099304238, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        2.21357428655099, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.80735827919567,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000, 0.00000000000000,
        0.00000000000000, 0.00000000000000, 0.00000000000000, 1.26850684502642
    };


    // Input IMU measurements
    y_imu_t imu_1 = {
        .array = {
            2.711216972515416,
            4.238310136658316,
            2.074393441904026,
            7.598779134258502,
            1.752878606103443,
            2.033296028751589,
            1.536372424330727,
            2.048978680348982,
            3.921288156935092,
            2.799920579853715
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_1 = {
        .array = {
            0.942736984276934,
            0.417744104316662,
            0.983052466469856,
            0.301454948712065,
            0.701098755900926,
            0.666338851584426,
            0.539126465042857,
            0.698105520180308,
            0.666527913402587,
            0.178132454400338
        }
    };

    // Input IMU measurements
    y_imu_t imu_2 = {
        .array = {
            7.387037136825951,
            3.441659130636672,
            1.478530560993089,
            7.239047749439143,
            7.837987026848682,
            3.510959785008826,
            0.888953787524790,
            2.064517567296535,
            3.269758768900417,
            4.759168592068915
        }
    };

    // Bias vector for IMU (mapping to y_imu_t)
    y_imu_t bias_2 = {
        .array = {
            0.128014399720173,
            0.999080394761361,
            0.171121066356432,
            0.032600820530528,
            0.561199792709660,
            0.881866500451810,
            0.669175304534394,
            0.190433267179954,
            0.368916546063895,
            0.460725937260412
        }
    };

    const double cmd = 0.547870901214845;
    const double encoder = 0.431651170248720; // this is unused
    const double dt = 1.038711463665142;
    const bool is_dead_mti = false;
    const bool is_dead_altimu = true;

    // Expected corrected state (xhat) and covariance (Phat)
    x_state_t expected_state = {
        .array = {
            0.59917841945000,
            -0.09777202932000,
            0.53904574497000,
            0.58382834531000,
            7.29769133868000,
            1.05220756011000,
            1.36718491846000,
            223.44787343083000,
            18015.70195190540000,
            2608.00965801792000,
            8423.14224532234000,
            -12.25707327188000,
            487.93206406597000
        }
    };

    double expected_P_flat[169] = {
        0.37667631152800,   -0.06154772905300,  0.33788309658440,   0.36642275239860,
        -0.00000072667100,  -0.00000077427300,  -0.00000104490550,  -2.25910583971760,
        0.47689817813970,   3.58976137330690,   0.03928144800580,   0.03107220972230,
        -1.09146999017430,  -0.06154772905300,  0.01110664527350,   -0.05535925424020,
        -0.06003504222960,  0.00000011879030,   0.00000012655800,   0.00000017090100,
        0.36650530885640,   -0.08121547243730,  -0.58673804644100,  -0.00642147668710,
        -0.00507943291240,  0.17842466437130,   0.33788309658440,   -0.05535925424020,
        0.30493245757120,   0.32957960697000,   -0.00000065286070,  -0.00000069571120,
        -0.00000093880860,  -2.02743810169510,  0.43153720082240,   3.22005538684170,
        0.03529373041610,   0.02791610524340,   -0.98060586575930,  0.36642275239860,
        -0.06003504222960,  0.32957960697000,   0.35843961504680,   -0.00000070714170,
        -0.00000075342380,  -0.00000101696450,  -2.20224420360180,  0.47210629050200,
        3.48982932017830,   0.03823091035370,   0.03023714103700,   -1.06213662708890,
        -0.00000072667100,  0.00000011879030,   -0.00000065286070,  -0.00000070714170,
        0.00000999998470,   -0.00000000001170,  -0.00000000001590,  0.00000506240960,
        -0.00000385016010,  -0.00000073181780,  0.00000000601660,   0.00000065302460,
        -0.00002293872030,  -0.00000077427300,  0.00000012655800,   -0.00000069571120,
        -0.00000075342380,  -0.00000000001170,  0.00000999998810,   -0.00000000001310,
        0.00000487668620,   0.00000210874250,   0.00000019649660,   0.00000000693850,
        0.00000050171250,   -0.00001762359700,  -0.00000104490550,  0.00000017090100,
        -0.00000093880860,  -0.00000101696450,  -0.00000000001590,  -0.00000000001310,
        0.00000999998100,   -0.00000139847600,  -0.00000099988330,  0.00000444356580,
        0.00000000374790,   0.00000067872080,   -0.00002384134900,  -2.25910583971760,
        0.36650530885640,   -2.02743810169510,  -2.20224420360180,  0.00000506240960,
        0.00000487668620,   -0.00000139847600,  81.67080526801820,  -21.04317029216590,
        -76.85434110809560, 0.00417752174180,   -0.21646693239280,  7.60380940666150,
        0.47689817813960,   -0.08121547243730,  0.43153720082230,   0.47210629050200,
        -0.00000385016010,  0.00000210874250,   -0.00000099988330,  -21.04317029216600,
        73.18236278726980,  -28.05871443568480, 0.29675372076600,   0.16463155266900,
        -5.78299389648280,  3.58976137330690,   -0.58673804644100,  3.22005538684170,
        3.48982932017840,   -0.00000073181780,  0.00000019649660,   0.00000444356580,
        -76.85434110809560, -28.05871443568480, 117.59673449026500, 0.04279423118980,
        0.03129228174200,   -1.09920043507440,  0.03928144800580,   -0.00642147668710,
        0.03529373041610,   0.03823091035370,   0.00000000601660,   0.00000000693850,
        0.00000000374790,   0.00417752174180,   0.29675372076600,   0.04279423118980,
        0.13863250182760,   -0.00025726836890,  0.00903703684440,   0.03107220972230,
        -0.00507943291240,  0.02791610524340,   0.03023714103700,   0.00000065302460,
        0.00000050171250,   0.00000067872080,   -0.21646693239280,  0.16463155266900,
        0.03129228174200,   -0.00025726836890,  104.34997966260300, 0.98085197480860,
        -1.09146999017430,  0.17842466437130,   -0.98060586575930,  -1.06213662708890,
        -0.00002293872030,  -0.00001762359700,  -0.00002384134900,  7.60380940666150,
        -5.78299389648280,  -1.09920043507440,  0.00903703684440,   0.98085197480860,
        471.94456684290200
    };

    // Act: Run the EKF correction step
    // y_meas is IMU_1(4:end)
    ekf_algorithm(&state, P_flat, &imu_1, &bias_1, &imu_2, &bias_2, cmd, encoder, dt, is_dead_mti, is_dead_altimu);

    // Assert
    double tolerance = 1e-6;

    // Check state (x)
    for (int i = 0; i < SIZE_STATE; i++) {
        EXPECT_NEAR(
            state.array[i], expected_state.array[i], tolerance
        );
    }

    // Check covariance (P)
    for (int i = 0; i < SIZE_STATE * SIZE_STATE; i++) {
        EXPECT_NEAR(P_flat[i], expected_P_flat[i], tolerance);
    }
}
