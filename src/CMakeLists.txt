cmake_minimum_required(VERSION 3.22)

# File was originally generated by stm32cubemx but modified heavily

# Define the build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug")
endif()

# Include toolchain file
include("${CMAKE_SOURCE_DIR}/cmake/gcc-arm-none-eabi.cmake")

# Enable CMake support for ASM and C languages
enable_language(C ASM)

# Enable compile command to ease indexing with e.g. clangd
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

# Core project settings
project(${CMAKE_PROJECT_NAME})
message("Build type: " ${CMAKE_BUILD_TYPE})
add_compile_options(-fdebug-prefix-map=${CMAKE_SOURCE_DIR}=../..)

# Create an executable object type
add_executable(${CMAKE_PROJECT_NAME})

# Add STM32CubeMX generated sources
add_subdirectory("${CMAKE_SOURCE_DIR}/cmake/stm32cubemx" "cmake/stm32cubemx")

# Link directories setup
target_link_directories(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user defined library search paths
)

# Add sources to executable
file(GLOB_RECURSE C_SOURCES "application/*.c"
    "drivers/*.c")

target_sources(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user sources here
    ${C_SOURCES}
    # only add lib files used by this project
    third_party/canlib/message/msg_actuator.c
    third_party/canlib/message/msg_common.c
    third_party/canlib/message/msg_general.c
    third_party/canlib/message/msg_gps.c
    third_party/canlib/message/msg_recovery.c
    third_party/canlib/message/msg_sensor.c
    third_party/canlib/message/msg_state_est.c
    third_party/canlib/stm32h7/stm32h7_can.c
    third_party/canlib/util/can_rcv_buffer.c
    third_party/canlib/util/can_tx_buffer.c
    third_party/canlib/util/safe_ring_buffer.c
    third_party/canlib/util/timing_util.c
    third_party/printf/printf.c
)

# Add include paths
target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user defined include paths
    ${CMAKE_CURRENT_SOURCE_DIR}
    third_party
    third_party/canlib
    third_party/printf
)

# Add project symbols (macros)
target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user defined symbols
    BOARD_INST_UNIQUE_ID=0x01
    BOARD_TYPE_UNIQUE_ID=0X06
)

# Add linked libraries
target_link_libraries(${CMAKE_PROJECT_NAME}
    stm32cubemx

    # Add user defined libraries
)

# Custom target to run clang-format
add_custom_target(format
    COMMAND echo "running clang-format"
    COMMAND clang-format -i --style=file:${CMAKE_SOURCE_DIR}/src/third_party/rocketlib/.clang-format
    ${CMAKE_SOURCE_DIR}/src/application/*/*.c ${CMAKE_SOURCE_DIR}/src/application/*/*.h
    ${CMAKE_SOURCE_DIR}/src/drivers/*/*.c ${CMAKE_SOURCE_DIR}/src/drivers/*/*.h
)

# Ensure format runs after every build
add_dependencies(${CMAKE_PROJECT_NAME} format)
