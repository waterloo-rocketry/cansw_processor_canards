# File was originally generated by stm32cubemx but modified heavily
cmake_minimum_required(VERSION 3.22)

# Define the build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug")
endif()

# Include toolchain file generated by stm32cubemx
include("${CMAKE_SOURCE_DIR}/cmake/gcc-arm-none-eabi.cmake")

# Enable CMake support for ASM
enable_language(C ASM)

# Enable compile command to ease indexing with e.g. clangd
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

# this is required to make the debug info in the elf file point to the correct source files
# instead of the absolute path in the build directory. ngl not entirely sure why this path
# has to be specifically that but it works. thank stackoverflow
add_compile_options(-fdebug-prefix-map=${CMAKE_SOURCE_DIR}=../..)

# add cmsis dsp library. Do this manually instead of using the cmsis-dsp
# CMakeLists.txt to avoid building unused cmsisdsp modules which would be slow and fat (derogatory)
set(CMSISDSP_DIR third_party/CMSIS-DSP)
add_library(CMSISDSP STATIC
    ${CMSISDSP_DIR}/Source/BasicMathFunctions/BasicMathFunctions.c 
    ${CMSISDSP_DIR}/Source/InterpolationFunctions/InterpolationFunctions.c 
    ${CMSISDSP_DIR}/Source/MatrixFunctions/MatrixFunctions.c 
    ${CMSISDSP_DIR}/Source/QuaternionMathFunctions/QuaternionMathFunctions.c 
    ${CMSISDSP_DIR}/Source/FastMathFunctions/FastMathFunctions.c 
)
# the include paths needed by cmsis-dsp itself
target_include_directories(CMSISDSP PUBLIC "${CMSISDSP_DIR}/Include")
target_include_directories(CMSISDSP PUBLIC "${CMSISDSP_DIR}/PrivateInclude")
# cmsis-dsp also requires the core cmsis files. use the cmsis folder provided by cubemx
target_include_directories(CMSISDSP PUBLIC "${CMAKE_SOURCE_DIR}/Drivers/CMSIS/Include")

# Add stm32 hal library
add_subdirectory("${CMAKE_SOURCE_DIR}/cmake/stm32cubemx" "stm32cubemx")
# target_compile_options(stm32cubemx INTERFACE "-w")

# Define our proc source files (and thirdparty libs we use from source)
file(GLOB_RECURSE C_SOURCES "application/*.c"
    "drivers/*.c")

set(CANLIB_SOURCES
    third_party/canlib/message/msg_actuator.c
    third_party/canlib/message/msg_common.c
    third_party/canlib/message/msg_general.c
    third_party/canlib/message/msg_gps.c
    third_party/canlib/message/msg_recovery.c
    third_party/canlib/message/msg_sensor.c
    third_party/canlib/message/msg_state_est.c
    third_party/canlib/stm32h7/stm32h7_can.c
    third_party/canlib/util/can_rcv_buffer.c
    third_party/canlib/util/can_tx_buffer.c
    third_party/canlib/util/safe_ring_buffer.c
    third_party/canlib/util/timing_util.c
)

set(PRINTF_SOURCES
    third_party/printf/printf.c
)

set(XSENS_MTI_SOURCES
    third_party/xsens-mti/src/xsens_mdata2.c
    third_party/xsens-mti/src/xsens_mti.c
    third_party/xsens-mti/src/xsens_utility.c
)

# Create the firmare binary given all our source files
add_executable(proc_binary
    ${C_SOURCES}
    ${CANLIB_SOURCES}
    ${PRINTF_SOURCES}
    ${XSENS_MTI_SOURCES}
)

# Add include paths used for our proc code.
# All #include paths in code must be relative to one of these roots
target_include_directories(proc_binary PRIVATE
    # CMAKE_CURRENT_SOURCE_DIR is the dir where this cmakelists is located aka src/
    ${CMAKE_CURRENT_SOURCE_DIR}
    third_party
    third_party/canlib
    third_party/printf
    third_party/xsens-mti/src
)

# Add project symbols (macros)
target_compile_definitions(proc_binary PRIVATE
    # Add user defined symbols
    BOARD_INST_UNIQUE_ID=0x01
    BOARD_TYPE_UNIQUE_ID=0X06
)

# link stm32 hal library and the cmsis-dsp library
target_link_libraries(proc_binary
    stm32cubemx
    CMSISDSP
)

# Custom target to run clang-format
add_custom_target(format
    COMMAND echo "running clang-format"
    COMMAND clang-format -i --style=file:${CMAKE_SOURCE_DIR}/src/third_party/rocketlib/.clang-format
    ${CMAKE_SOURCE_DIR}/src/application/*/*.c ${CMAKE_SOURCE_DIR}/src/application/*/*.h
    ${CMAKE_SOURCE_DIR}/src/drivers/*/*.c ${CMAKE_SOURCE_DIR}/src/drivers/*/*.h
)
