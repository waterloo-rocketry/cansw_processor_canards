# File was originally generated by stm32cubemx but modified heavily
cmake_minimum_required(VERSION 3.22)

# Define the build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug")
endif()

# Set debug/release optimization flags
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    add_compile_options(-O0 -g3)
elseif(CMAKE_BUILD_TYPE STREQUAL "Release")
    add_compile_options(-O3)
endif()

# Include toolchain file generated by stm32cubemx
include("${CMAKE_SOURCE_DIR}/cmake/gcc-arm-none-eabi.cmake")

# Enable CMake support for ASM
enable_language(C ASM)

# Enable compile command to ease indexing with e.g. clangd
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

# this is required to make the debug info in the elf file point to the correct source files
# instead of the absolute path in the build directory. this makes gdb search relative to the
# root of the project instead of the build directory... i think? it works so
add_compile_options(-fdebug-prefix-map=${CMAKE_SOURCE_DIR}=../..)

# define common include paths used by everything in this project
set(COMMON_INCLUDES
    # CMAKE_CURRENT_SOURCE_DIR is the dir where this cmakelists is located aka src/
    ${CMAKE_CURRENT_SOURCE_DIR}    
    third_party
    third_party/canlib
    third_party/printf
    third_party/xsens-mti/src
)

# Add stm32 hal library
add_subdirectory("${CMAKE_SOURCE_DIR}/cmake/stm32cubemx" "stm32cubemx")
target_include_directories(stm32cubemx PUBLIC
    ${COMMON_INCLUDES}
)

# add cmsis dsp library. Do this manually instead of using the cmsis-dsp
# CMakeLists.txt to avoid building unused cmsisdsp modules which would be slow and fat (derogatory)
set(CMSISDSP_DIR third_party/CMSIS-DSP)
add_library(CMSISDSP STATIC
    ${CMSISDSP_DIR}/Source/BasicMathFunctions/BasicMathFunctions.c 
    ${CMSISDSP_DIR}/Source/InterpolationFunctions/InterpolationFunctions.c 
    ${CMSISDSP_DIR}/Source/MatrixFunctions/MatrixFunctions.c 
    ${CMSISDSP_DIR}/Source/QuaternionMathFunctions/QuaternionMathFunctions.c 
    ${CMSISDSP_DIR}/Source/FastMathFunctions/FastMathFunctions.c 
)

# the include paths needed by cmsis-dsp
target_include_directories(CMSISDSP PUBLIC
    ${CMSISDSP_DIR}/Include
    ${CMSISDSP_DIR}/PrivateInclude
    # cmsis-dsp also requires the core cmsis files. use the cmsis folder provided by cubemx
    ${CMAKE_SOURCE_DIR}/Drivers/CMSIS/Include
)

# find all our proc source files
file(GLOB_RECURSE PROC_SOURCES
    "application/*.c"
    "drivers/*.c")

# define thirdparty source files
# don't glob canlib because there's a lot of exclusions
set(CANLIB_SOURCES
    third_party/canlib/message/msg_actuator.c
    third_party/canlib/message/msg_common.c
    third_party/canlib/message/msg_general.c
    third_party/canlib/message/msg_gps.c
    third_party/canlib/message/msg_recovery.c
    third_party/canlib/message/msg_sensor.c
    third_party/canlib/message/msg_state_est.c
    third_party/canlib/stm32h7/stm32h7_can.c
    third_party/canlib/util/can_rcv_buffer.c
    third_party/canlib/util/can_tx_buffer.c
    third_party/canlib/util/safe_ring_buffer.c
    third_party/canlib/util/timing_util.c
)

set(PRINTF_SOURCES
    third_party/printf/printf.c
)

set(XSENS_MTI_SOURCES
    third_party/xsens-mti/src/xsens_mdata2.c
    third_party/xsens-mti/src/xsens_mti.c
    third_party/xsens-mti/src/xsens_utility.c
)

# Create static library containing all thirdparty code
add_library(third_party_lib STATIC
    ${CANLIB_SOURCES}
    ${XSENS_MTI_SOURCES}
    ${PRINTF_SOURCES}
)

# thirdparty libs need the common include paths
target_include_directories(third_party_lib PRIVATE
    ${COMMON_INCLUDES}
)

# thirdparty libs need stm32 hal
target_link_libraries(third_party_lib stm32cubemx)

# macros for canlib
target_compile_definitions(third_party_lib PRIVATE
    BOARD_INST_UNIQUE_ID=BOARD_INST_ID_GENERIC
    BOARD_TYPE_UNIQUE_ID=BOARD_TYPE_ID_PROCESSOR
)

# disable compiler warnings for thirdparty code
target_compile_options(third_party_lib PRIVATE
    -w
)

# Create the target to build the firmare binary (proc_binary.elf)
add_executable(proc_binary
    ${PROC_SOURCES}
)

# we also need these macros
target_compile_definitions(proc_binary PRIVATE
    BOARD_INST_UNIQUE_ID=BOARD_INST_ID_GENERIC
    BOARD_TYPE_UNIQUE_ID=BOARD_TYPE_ID_PROCESSOR
)

# Add include paths used for our proc code.
# All `#include` paths in code must be relative to one of these roots
target_include_directories(proc_binary PRIVATE
    ${COMMON_INCLUDES}
)

# link the thirdparty libs to proc binary
target_link_libraries(proc_binary
    stm32cubemx
    CMSISDSP
    third_party_lib
)

# treat all warnings as errors
target_compile_options(proc_binary PRIVATE
    -Wall
    -Werror
)

# Custom target to run clang-format on every build
add_custom_target(format
    COMMAND echo "running clang-format"
    COMMAND clang-format -i --style=file:${CMAKE_SOURCE_DIR}/src/third_party/rocketlib/.clang-format
    ${CMAKE_SOURCE_DIR}/src/application/*/*.c ${CMAKE_SOURCE_DIR}/src/application/*/*.h
    ${CMAKE_SOURCE_DIR}/src/drivers/*/*.c ${CMAKE_SOURCE_DIR}/src/drivers/*/*.h
)
